{"ast":null,"code":"import { ɵɵdefineInjectable, Injectable, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ElementRef, Renderer2, ChangeDetectorRef, Input, HostBinding, Output, ViewChild, HostListener, Directive, ViewContainerRef, ComponentFactoryResolver, Optional, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as momentNs from 'moment';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\nconst _c0 = [\"container\"];\nconst _c1 = [\"dayCalendar\"];\nconst _c2 = [\"monthCalendar\"];\nconst _c3 = [\"daytimeCalendar\"];\nconst _c4 = [\"timeSelect\"];\n\nfunction DatePickerComponent_dp_day_calendar_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"dp-day-calendar\", 8, 9);\n    ɵngcc0.ɵɵlistener(\"onGoToCurrent\", function DatePickerComponent_dp_day_calendar_6_Template_dp_day_calendar_onGoToCurrent_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.onGoToCurrent.emit();\n    })(\"onLeftNav\", function DatePickerComponent_dp_day_calendar_6_Template_dp_day_calendar_onLeftNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onLeftNavClick($event);\n    })(\"onRightNav\", function DatePickerComponent_dp_day_calendar_6_Template_dp_day_calendar_onRightNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onRightNavClick($event);\n    })(\"onSelect\", function DatePickerComponent_dp_day_calendar_6_Template_dp_day_calendar_onSelect_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.dateSelected($event, \"day\", ctx_r10.selectEvent.SELECTION, false);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r1.dayCalendarConfig)(\"displayDate\", ctx_r1.displayDate)(\"ngModel\", ctx_r1._selected)(\"theme\", ctx_r1.theme);\n  }\n}\n\nfunction DatePickerComponent_dp_month_calendar_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"dp-month-calendar\", 8, 10);\n    ɵngcc0.ɵɵlistener(\"onGoToCurrent\", function DatePickerComponent_dp_month_calendar_7_Template_dp_month_calendar_onGoToCurrent_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onGoToCurrent.emit();\n    })(\"onLeftNav\", function DatePickerComponent_dp_month_calendar_7_Template_dp_month_calendar_onLeftNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onLeftNavClick($event);\n    })(\"onRightNav\", function DatePickerComponent_dp_month_calendar_7_Template_dp_month_calendar_onRightNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onRightNavClick($event);\n    })(\"onSelect\", function DatePickerComponent_dp_month_calendar_7_Template_dp_month_calendar_onSelect_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.dateSelected($event, \"month\", ctx_r16.selectEvent.SELECTION, false);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r2.dayCalendarConfig)(\"displayDate\", ctx_r2.displayDate)(\"ngModel\", ctx_r2._selected)(\"theme\", ctx_r2.theme);\n  }\n}\n\nfunction DatePickerComponent_dp_time_select_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"dp-time-select\", 11, 12);\n    ɵngcc0.ɵɵlistener(\"onChange\", function DatePickerComponent_dp_time_select_8_Template_dp_time_select_onChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.dateSelected($event, \"second\", ctx_r18.selectEvent.SELECTION, true);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r3.timeSelectConfig)(\"ngModel\", ctx_r3._selected && ctx_r3._selected[0])(\"theme\", ctx_r3.theme);\n  }\n}\n\nfunction DatePickerComponent_dp_day_time_calendar_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"dp-day-time-calendar\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"onChange\", function DatePickerComponent_dp_day_time_calendar_9_Template_dp_day_time_calendar_onChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.dateSelected($event, \"second\", ctx_r21.selectEvent.SELECTION, true);\n    })(\"onGoToCurrent\", function DatePickerComponent_dp_day_time_calendar_9_Template_dp_day_time_calendar_onGoToCurrent_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r23 = ɵngcc0.ɵɵnextContext();\n      return ctx_r23.onGoToCurrent.emit();\n    })(\"onLeftNav\", function DatePickerComponent_dp_day_time_calendar_9_Template_dp_day_time_calendar_onLeftNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ctx_r24.onLeftNavClick($event);\n    })(\"onRightNav\", function DatePickerComponent_dp_day_time_calendar_9_Template_dp_day_time_calendar_onRightNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      const ctx_r25 = ɵngcc0.ɵɵnextContext();\n      return ctx_r25.onRightNavClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r4.dayTimeCalendarConfig)(\"displayDate\", ctx_r4.displayDate)(\"ngModel\", ctx_r4._selected && ctx_r4._selected[0])(\"theme\", ctx_r4.theme);\n  }\n}\n\nconst _c5 = function (a0) {\n  return {\n    \"dp-open\": a0\n  };\n};\n\nfunction DayCalendarComponent_div_0_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const weekday_r4 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerText\", ctx_r2.getWeekdayName(weekday_r4));\n  }\n}\n\nfunction DayCalendarComponent_div_0_div_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 12);\n  }\n\n  if (rf & 2) {\n    const week_r5 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"innerText\", week_r5[0].date.isoWeek());\n  }\n}\n\nfunction DayCalendarComponent_div_0_div_5_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 13);\n    ɵngcc0.ɵɵlistener(\"click\", function DayCalendarComponent_div_0_div_5_button_2_Template_button_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11);\n      const day_r9 = restoredCtx.$implicit;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r10.dayClicked(day_r9);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const day_r9 = ctx.$implicit;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"disabled\", day_r9.disabled)(\"innerText\", ctx_r7.getDayBtnText(day_r9))(\"ngClass\", ctx_r7.getDayBtnCssClass(day_r9));\n    ɵngcc0.ɵɵattribute(\"data-date\", day_r9.date.format(ctx_r7.componentConfig.format));\n  }\n}\n\nfunction DayCalendarComponent_div_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(1, DayCalendarComponent_div_0_div_5_span_1_Template, 1, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, DayCalendarComponent_div_0_div_5_button_2_Template, 1, 4, \"button\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const week_r5 = ctx.$implicit;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.componentConfig.showWeekNumbers);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", week_r5);\n  }\n}\n\nconst _c6 = function (a0) {\n  return {\n    \"dp-hide-near-month\": a0\n  };\n};\n\nfunction DayCalendarComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2)(1, \"dp-calendar-nav\", 3);\n    ɵngcc0.ɵɵlistener(\"onGoToCurrent\", function DayCalendarComponent_div_0_Template_dp_calendar_nav_onGoToCurrent_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.goToCurrent();\n    })(\"onLabelClick\", function DayCalendarComponent_div_0_Template_dp_calendar_nav_onLabelClick_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.toggleCalendarMode(ctx_r14.CalendarMode.Month);\n    })(\"onLeftNav\", function DayCalendarComponent_div_0_Template_dp_calendar_nav_onLeftNav_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onLeftNavClick();\n    })(\"onRightNav\", function DayCalendarComponent_div_0_Template_dp_calendar_nav_onRightNav_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.onRightNavClick();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"div\", 4)(3, \"div\", 5);\n    ɵngcc0.ɵɵtemplate(4, DayCalendarComponent_div_0_span_4_Template, 1, 1, \"span\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, DayCalendarComponent_div_0_div_5_Template, 3, 2, \"div\", 7);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"isLabelClickable\", ctx_r0.componentConfig.enableMonthSelector)(\"label\", ctx_r0.navLabel)(\"showGoToCurrent\", ctx_r0._shouldShowCurrent)(\"showLeftNav\", ctx_r0.showLeftNav)(\"showRightNav\", ctx_r0.showRightNav)(\"theme\", ctx_r0.theme);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(9, _c6, !ctx_r0.componentConfig.showNearMonthDays));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.weekdays);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.weeks);\n  }\n}\n\nfunction DayCalendarComponent_dp_month_calendar_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"dp-month-calendar\", 14);\n    ɵngcc0.ɵɵlistener(\"onLeftNav\", function DayCalendarComponent_dp_month_calendar_1_Template_dp_month_calendar_onLeftNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.onMonthCalendarLeftClick($event);\n    })(\"onLeftSecondaryNav\", function DayCalendarComponent_dp_month_calendar_1_Template_dp_month_calendar_onLeftSecondaryNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.onMonthCalendarSecondaryLeftClick($event);\n    })(\"onNavHeaderBtnClick\", function DayCalendarComponent_dp_month_calendar_1_Template_dp_month_calendar_onNavHeaderBtnClick_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.toggleCalendarMode(ctx_r20.CalendarMode.Day);\n    })(\"onRightNav\", function DayCalendarComponent_dp_month_calendar_1_Template_dp_month_calendar_onRightNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.onMonthCalendarRightClick($event);\n    })(\"onRightSecondaryNav\", function DayCalendarComponent_dp_month_calendar_1_Template_dp_month_calendar_onRightSecondaryNav_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ctx_r22.onMonthCalendarSecondaryRightClick($event);\n    })(\"onSelect\", function DayCalendarComponent_dp_month_calendar_1_Template_dp_month_calendar_onSelect_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r23 = ɵngcc0.ɵɵnextContext();\n      return ctx_r23.monthSelected($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"config\", ctx_r1.monthCalendarConfig)(\"displayDate\", ctx_r1._currentDateView)(\"ngModel\", ctx_r1._selected)(\"theme\", ctx_r1.theme);\n  }\n}\n\nfunction MonthCalendarComponent_div_3_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function MonthCalendarComponent_div_3_button_1_Template_button_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const month_r3 = restoredCtx.$implicit;\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r4.monthClicked(month_r3);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const month_r3 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", month_r3.disabled)(\"innerText\", month_r3.text)(\"ngClass\", ctx_r2.getMonthBtnCssClass(month_r3));\n    ɵngcc0.ɵɵattribute(\"data-date\", month_r3.date.format(ctx_r2.componentConfig.format));\n  }\n}\n\nfunction MonthCalendarComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(1, MonthCalendarComponent_div_3_button_1_Template, 1, 4, \"button\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const monthRow_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", monthRow_r1);\n  }\n}\n\nfunction TimeSelectComponent_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"li\", 5);\n    ɵngcc0.ɵɵelementStart(2, \"li\", 10)(3, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_ng_container_10_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.increase(\"second\");\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(4, \"span\", 11);\n    ɵngcc0.ɵɵelementStart(5, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_ng_container_10_Template_button_click_5_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.decrease(\"second\");\n    });\n    ɵngcc0.ɵɵelementEnd()();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerText\", ctx_r0.componentConfig.timeSeparator);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", !ctx_r0.showIncSecond);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerText\", ctx_r0.seconds);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", !ctx_r0.showDecSecond);\n  }\n}\n\nfunction TimeSelectComponent_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 12)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_li_11_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.toggleMeridiem();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(2, \"span\", 13);\n    ɵngcc0.ɵɵelementStart(3, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_li_11_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.toggleMeridiem();\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", !ctx_r1.showToggleMeridiem);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerText\", ctx_r1.meridiem);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", !ctx_r1.showToggleMeridiem);\n  }\n}\n\nfunction CalendarNavComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function CalendarNavComponent_button_6_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.leftSecondaryNavClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r0.leftSecondaryNavDisabled);\n  }\n}\n\nfunction CalendarNavComponent_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 13);\n    ɵngcc0.ɵɵlistener(\"click\", function CalendarNavComponent_button_8_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.onGoToCurrent.emit();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction CalendarNavComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 14);\n    ɵngcc0.ɵɵlistener(\"click\", function CalendarNavComponent_button_11_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.rightSecondaryNavClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r2.rightSecondaryNavDisabled);\n  }\n}\n\nvar ECalendarMode = /*#__PURE__*/(() => {\n  (function (ECalendarMode) {\n    ECalendarMode[ECalendarMode[\"Day\"] = 0] = \"Day\";\n    ECalendarMode[ECalendarMode[\"DayTime\"] = 1] = \"DayTime\";\n    ECalendarMode[ECalendarMode[\"Month\"] = 2] = \"Month\";\n    ECalendarMode[ECalendarMode[\"Time\"] = 3] = \"Time\";\n  })(ECalendarMode || (ECalendarMode = {}));\n\n  return ECalendarMode;\n})();\nvar ECalendarValue = /*#__PURE__*/(() => {\n  (function (ECalendarValue) {\n    ECalendarValue[ECalendarValue[\"Moment\"] = 1] = \"Moment\";\n    ECalendarValue[ECalendarValue[\"MomentArr\"] = 2] = \"MomentArr\";\n    ECalendarValue[ECalendarValue[\"String\"] = 3] = \"String\";\n    ECalendarValue[ECalendarValue[\"StringArr\"] = 4] = \"StringArr\";\n  })(ECalendarValue || (ECalendarValue = {}));\n\n  return ECalendarValue;\n})();\nvar SelectEvent = /*#__PURE__*/(() => {\n  (function (SelectEvent) {\n    SelectEvent[\"INPUT\"] = \"input\";\n    SelectEvent[\"SELECTION\"] = \"selection\";\n  })(SelectEvent || (SelectEvent = {}));\n\n  return SelectEvent;\n})();\nlet DomHelper = /*#__PURE__*/(() => {\n  class DomHelper {\n    static setYAxisPosition(element, container, anchor, drops) {\n      const anchorRect = anchor.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      const bottom = anchorRect.bottom - containerRect.top;\n      const top = anchorRect.top - containerRect.top;\n\n      if (drops === 'down') {\n        element.style.top = bottom + 1 + 'px';\n      } else {\n        element.style.top = top - 1 - element.scrollHeight + 'px';\n      }\n    }\n\n    static setXAxisPosition(element, container, anchor, dimElem, opens) {\n      const anchorRect = anchor.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      const left = anchorRect.left - containerRect.left;\n\n      if (opens === 'right') {\n        element.style.left = left + 'px';\n      } else {\n        element.style.left = left - dimElem.offsetWidth + anchor.offsetWidth + 'px';\n      }\n    }\n\n    static isTopInView(el) {\n      const {\n        top\n      } = el.getBoundingClientRect();\n      return top >= 0;\n    }\n\n    static isBottomInView(el) {\n      const {\n        bottom\n      } = el.getBoundingClientRect();\n      return bottom <= window.innerHeight;\n    }\n\n    static isLeftInView(el) {\n      const {\n        left\n      } = el.getBoundingClientRect();\n      return left >= 0;\n    }\n\n    static isRightInView(el) {\n      const {\n        right\n      } = el.getBoundingClientRect();\n      return right <= window.innerWidth;\n    }\n\n    appendElementToPosition(config) {\n      const {\n        container,\n        element\n      } = config;\n\n      if (!container.style.position || container.style.position === 'static') {\n        container.style.position = 'relative';\n      }\n\n      if (element.style.position !== 'absolute') {\n        element.style.position = 'absolute';\n      }\n\n      element.style.visibility = 'hidden';\n      setTimeout(() => {\n        this.setElementPosition(config);\n        element.style.visibility = 'visible';\n      });\n    }\n\n    setElementPosition({\n      element,\n      container,\n      anchor,\n      dimElem,\n      drops,\n      opens\n    }) {\n      DomHelper.setYAxisPosition(element, container, anchor, 'down');\n      DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'right');\n\n      if (drops !== 'down' && drops !== 'up') {\n        if (DomHelper.isBottomInView(dimElem)) {\n          DomHelper.setYAxisPosition(element, container, anchor, 'down');\n        } else if (DomHelper.isTopInView(dimElem)) {\n          DomHelper.setYAxisPosition(element, container, anchor, 'up');\n        }\n      } else {\n        DomHelper.setYAxisPosition(element, container, anchor, drops);\n      }\n\n      if (opens !== 'left' && opens !== 'right') {\n        if (DomHelper.isRightInView(dimElem)) {\n          DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'right');\n        } else if (DomHelper.isLeftInView(dimElem)) {\n          DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'left');\n        }\n      } else {\n        DomHelper.setXAxisPosition(element, container, anchor, dimElem, opens);\n      }\n    }\n\n  }\n\n  DomHelper.ɵfac = function DomHelper_Factory(t) {\n    return new (t || DomHelper)();\n  };\n\n  DomHelper.ɵprov = ɵɵdefineInjectable({\n    factory: function DomHelper_Factory() {\n      return new DomHelper();\n    },\n    token: DomHelper,\n    providedIn: \"root\"\n  });\n  return DomHelper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment = momentNs;\nlet UtilsService = /*#__PURE__*/(() => {\n  class UtilsService {\n    static debounce(func, wait) {\n      let timeout;\n      return function () {\n        const context = this,\n              args = arguments;\n        timeout = clearTimeout(timeout);\n        setTimeout(() => {\n          func.apply(context, args);\n        }, wait);\n      };\n    }\n\n    createArray(size) {\n      return new Array(size).fill(1);\n    }\n\n    convertToMoment(date, format) {\n      if (!date) {\n        return null;\n      } else if (typeof date === 'string') {\n        return moment(date, format);\n      } else {\n        return date.clone();\n      }\n    }\n\n    isDateValid(date, format) {\n      if (date === '') {\n        return true;\n      }\n\n      return moment(date, format, true).isValid();\n    } // todo:: add unit test\n\n\n    getDefaultDisplayDate(current, selected, allowMultiSelect, minDate) {\n      if (current) {\n        return current.clone();\n      } else if (minDate && minDate.isAfter(moment())) {\n        return minDate.clone();\n      } else if (allowMultiSelect) {\n        if (selected && selected[selected.length]) {\n          return selected[selected.length].clone();\n        }\n      } else if (selected && selected[0]) {\n        return selected[0].clone();\n      }\n\n      return moment();\n    } // todo:: add unit test\n\n\n    getInputType(value, allowMultiSelect) {\n      if (Array.isArray(value)) {\n        if (!value.length) {\n          return ECalendarValue.MomentArr;\n        } else if (typeof value[0] === 'string') {\n          return ECalendarValue.StringArr;\n        } else if (moment.isMoment(value[0])) {\n          return ECalendarValue.MomentArr;\n        }\n      } else {\n        if (typeof value === 'string') {\n          return ECalendarValue.String;\n        } else if (moment.isMoment(value)) {\n          return ECalendarValue.Moment;\n        }\n      }\n\n      return allowMultiSelect ? ECalendarValue.MomentArr : ECalendarValue.Moment;\n    } // todo:: add unit test\n\n\n    convertToMomentArray(value, config) {\n      let retVal;\n\n      switch (this.getInputType(value, config.allowMultiSelect)) {\n        case ECalendarValue.String:\n          retVal = value ? [moment(value, config.format, true)] : [];\n          break;\n\n        case ECalendarValue.StringArr:\n          retVal = value.map(v => v ? moment(v, config.format, true) : null).filter(Boolean);\n          break;\n\n        case ECalendarValue.Moment:\n          retVal = value ? [value.clone()] : [];\n          break;\n\n        case ECalendarValue.MomentArr:\n          retVal = (value || []).map(v => v.clone());\n          break;\n\n        default:\n          retVal = [];\n      }\n\n      return retVal;\n    } // todo:: add unit test\n\n\n    convertFromMomentArray(format, value, convertTo) {\n      switch (convertTo) {\n        case ECalendarValue.String:\n          return value[0] && value[0].format(format);\n\n        case ECalendarValue.StringArr:\n          return value.filter(Boolean).map(v => v.format(format));\n\n        case ECalendarValue.Moment:\n          return value[0] ? value[0].clone() : value[0];\n\n        case ECalendarValue.MomentArr:\n          return value ? value.map(v => v.clone()) : value;\n\n        default:\n          return value;\n      }\n    }\n\n    convertToString(value, format) {\n      let tmpVal;\n\n      if (typeof value === 'string') {\n        tmpVal = [value];\n      } else if (Array.isArray(value)) {\n        if (value.length) {\n          tmpVal = value.map(v => {\n            return this.convertToMoment(v, format).format(format);\n          });\n        } else {\n          tmpVal = value;\n        }\n      } else if (moment.isMoment(value)) {\n        tmpVal = [value.format(format)];\n      } else {\n        return '';\n      }\n\n      return tmpVal.filter(Boolean).join(' | ');\n    } // todo:: add unit test\n\n\n    clearUndefined(obj) {\n      if (!obj) {\n        return obj;\n      }\n\n      Object.keys(obj).forEach(key => obj[key] === undefined && delete obj[key]);\n      return obj;\n    }\n\n    updateSelected(isMultiple, currentlySelected, date, granularity = 'day') {\n      if (isMultiple) {\n        return !date.selected ? currentlySelected.concat([date.date]) : currentlySelected.filter(d => !d.isSame(date.date, granularity));\n      } else {\n        return !date.selected ? [date.date] : [];\n      }\n    }\n\n    closestParent(element, selector) {\n      if (!element) {\n        return undefined;\n      }\n\n      const match = element.querySelector(selector);\n      return match || this.closestParent(element.parentElement, selector);\n    }\n\n    onlyTime(m) {\n      return m && moment.isMoment(m) && moment(m.format('HH:mm:ss'), 'HH:mm:ss');\n    }\n\n    granularityFromType(calendarType) {\n      switch (calendarType) {\n        case 'time':\n          return 'second';\n\n        case 'daytime':\n          return 'second';\n\n        default:\n          return calendarType;\n      }\n    }\n\n    createValidator({\n      minDate,\n      maxDate,\n      minTime,\n      maxTime\n    }, format, calendarType) {\n      let isValid;\n      let value;\n      const validators = [];\n      const granularity = this.granularityFromType(calendarType);\n\n      if (minDate) {\n        const md = this.convertToMoment(minDate, format);\n        validators.push({\n          key: 'minDate',\n          isValid: () => {\n            const _isValid = value.every(val => val.isSameOrAfter(md, granularity));\n\n            isValid = isValid ? _isValid : false;\n            return _isValid;\n          }\n        });\n      }\n\n      if (maxDate) {\n        const md = this.convertToMoment(maxDate, format);\n        validators.push({\n          key: 'maxDate',\n          isValid: () => {\n            const _isValid = value.every(val => val.isSameOrBefore(md, granularity));\n\n            isValid = isValid ? _isValid : false;\n            return _isValid;\n          }\n        });\n      }\n\n      if (minTime) {\n        const md = this.onlyTime(this.convertToMoment(minTime, format));\n        validators.push({\n          key: 'minTime',\n          isValid: () => {\n            const _isValid = value.every(val => this.onlyTime(val).isSameOrAfter(md));\n\n            isValid = isValid ? _isValid : false;\n            return _isValid;\n          }\n        });\n      }\n\n      if (maxTime) {\n        const md = this.onlyTime(this.convertToMoment(maxTime, format));\n        validators.push({\n          key: 'maxTime',\n          isValid: () => {\n            const _isValid = value.every(val => this.onlyTime(val).isSameOrBefore(md));\n\n            isValid = isValid ? _isValid : false;\n            return _isValid;\n          }\n        });\n      }\n\n      return inputVal => {\n        isValid = true;\n        value = this.convertToMomentArray(inputVal, {\n          format,\n          allowMultiSelect: true\n        }).filter(Boolean);\n\n        if (!value.every(val => val.isValid())) {\n          return {\n            format: {\n              given: inputVal\n            }\n          };\n        }\n\n        const errors = validators.reduce((map, err) => {\n          if (!err.isValid()) {\n            map[err.key] = {\n              given: value\n            };\n          }\n\n          return map;\n        }, {});\n        return !isValid ? errors : null;\n      };\n    }\n\n    datesStringToStringArray(value) {\n      return (value || '').split('|').map(m => m.trim()).filter(Boolean);\n    }\n\n    getValidMomentArray(value, format) {\n      return this.datesStringToStringArray(value).filter(d => this.isDateValid(d, format)).map(d => moment(d, format));\n    }\n\n    shouldShowCurrent(showGoToCurrent, mode, min, max) {\n      return showGoToCurrent && mode !== 'time' && this.isDateInRange(moment(), min, max);\n    }\n\n    isDateInRange(date, from, to) {\n      return date.isBetween(from, to, 'day', '[]');\n    }\n\n    convertPropsToMoment(obj, format, props) {\n      props.forEach(prop => {\n        if (obj.hasOwnProperty(prop)) {\n          obj[prop] = this.convertToMoment(obj[prop], format);\n        }\n      });\n    }\n\n    shouldResetCurrentView(prevConf, currentConf) {\n      if (prevConf && currentConf) {\n        if (!prevConf.min && currentConf.min) {\n          return true;\n        } else if (prevConf.min && currentConf.min && !prevConf.min.isSame(currentConf.min, 'd')) {\n          return true;\n        } else if (!prevConf.max && currentConf.max) {\n          return true;\n        } else if (prevConf.max && currentConf.max && !prevConf.max.isSame(currentConf.max, 'd')) {\n          return true;\n        }\n\n        return false;\n      }\n\n      return false;\n    }\n\n    getNativeElement(elem) {\n      if (!elem) {\n        return null;\n      } else if (typeof elem === 'string') {\n        return document.querySelector(elem);\n      } else {\n        return elem;\n      }\n    }\n\n  }\n\n  UtilsService.ɵfac = function UtilsService_Factory(t) {\n    return new (t || UtilsService)();\n  };\n\n  UtilsService.ɵprov = ɵɵdefineInjectable({\n    factory: function UtilsService_Factory() {\n      return new UtilsService();\n    },\n    token: UtilsService,\n    providedIn: \"root\"\n  });\n  return UtilsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$1 = momentNs;\nlet DayCalendarService = /*#__PURE__*/(() => {\n  class DayCalendarService {\n    constructor(utilsService) {\n      this.utilsService = utilsService;\n      this.DEFAULT_CONFIG = {\n        showNearMonthDays: true,\n        showWeekNumbers: false,\n        firstDayOfWeek: 'su',\n        weekDayFormat: 'ddd',\n        format: 'DD-MM-YYYY',\n        allowMultiSelect: false,\n        monthFormat: 'MMM, YYYY',\n        enableMonthSelector: true,\n        locale: moment$1.locale(),\n        dayBtnFormat: 'DD',\n        unSelectOnClick: true\n      };\n      this.DAYS = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n    }\n\n    getConfig(config) {\n      const _config = Object.assign(Object.assign({}, this.DEFAULT_CONFIG), this.utilsService.clearUndefined(config));\n\n      this.utilsService.convertPropsToMoment(_config, _config.format, ['min', 'max']);\n      moment$1.locale(_config.locale);\n      return _config;\n    }\n\n    generateDaysMap(firstDayOfWeek) {\n      const firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n      const daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n      return daysArr.reduce((map, day, index) => {\n        map[day] = index;\n        return map;\n      }, {});\n    }\n\n    generateMonthArray(config, month, selected) {\n      let monthArray = [];\n      const firstDayOfWeekIndex = this.DAYS.indexOf(config.firstDayOfWeek);\n      const firstDayOfBoard = month.clone().startOf('month');\n\n      while (firstDayOfBoard.day() !== firstDayOfWeekIndex) {\n        firstDayOfBoard.subtract(1, 'day');\n      }\n\n      const current = firstDayOfBoard.clone();\n      const prevMonth = month.clone().subtract(1, 'month');\n      const nextMonth = month.clone().add(1, 'month');\n      const today = moment$1();\n      const daysOfCalendar = this.utilsService.createArray(42).reduce(array => {\n        array.push({\n          date: current.clone(),\n          selected: !!selected.find(selectedDay => current.isSame(selectedDay, 'day')),\n          currentMonth: current.isSame(month, 'month'),\n          prevMonth: current.isSame(prevMonth, 'month'),\n          nextMonth: current.isSame(nextMonth, 'month'),\n          currentDay: current.isSame(today, 'day'),\n          disabled: this.isDateDisabled(current, config)\n        });\n        current.add(1, 'day');\n        return array;\n      }, []);\n      daysOfCalendar.forEach((day, index) => {\n        const weekIndex = Math.floor(index / 7);\n\n        if (!monthArray[weekIndex]) {\n          monthArray.push([]);\n        }\n\n        monthArray[weekIndex].push(day);\n      });\n\n      if (!config.showNearMonthDays) {\n        monthArray = this.removeNearMonthWeeks(month, monthArray);\n      }\n\n      return monthArray;\n    }\n\n    generateWeekdays(firstDayOfWeek) {\n      const weekdayNames = {\n        su: moment$1().day(0),\n        mo: moment$1().day(1),\n        tu: moment$1().day(2),\n        we: moment$1().day(3),\n        th: moment$1().day(4),\n        fr: moment$1().day(5),\n        sa: moment$1().day(6)\n      };\n      const weekdays = [];\n      const daysMap = this.generateDaysMap(firstDayOfWeek);\n\n      for (const dayKey in daysMap) {\n        if (daysMap.hasOwnProperty(dayKey)) {\n          weekdays[daysMap[dayKey]] = weekdayNames[dayKey];\n        }\n      }\n\n      return weekdays;\n    }\n\n    isDateDisabled(date, config) {\n      if (config.isDayDisabledCallback) {\n        return config.isDayDisabledCallback(date);\n      }\n\n      if (config.min && date.isBefore(config.min, 'day')) {\n        return true;\n      }\n\n      return !!(config.max && date.isAfter(config.max, 'day'));\n    } // todo:: add unit tests\n\n\n    getHeaderLabel(config, month) {\n      if (config.monthFormatter) {\n        return config.monthFormatter(month);\n      }\n\n      return month.format(config.monthFormat);\n    } // todo:: add unit tests\n\n\n    shouldShowLeft(min, currentMonthView) {\n      return min ? min.isBefore(currentMonthView, 'month') : true;\n    } // todo:: add unit tests\n\n\n    shouldShowRight(max, currentMonthView) {\n      return max ? max.isAfter(currentMonthView, 'month') : true;\n    }\n\n    generateDaysIndexMap(firstDayOfWeek) {\n      const firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n      const daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n      return daysArr.reduce((map, day, index) => {\n        map[index] = day;\n        return map;\n      }, {});\n    }\n\n    getMonthCalendarConfig(componentConfig) {\n      return this.utilsService.clearUndefined({\n        min: componentConfig.min,\n        max: componentConfig.max,\n        format: componentConfig.format,\n        isNavHeaderBtnClickable: true,\n        allowMultiSelect: false,\n        locale: componentConfig.locale,\n        yearFormat: componentConfig.yearFormat,\n        yearFormatter: componentConfig.yearFormatter,\n        monthBtnFormat: componentConfig.monthBtnFormat,\n        monthBtnFormatter: componentConfig.monthBtnFormatter,\n        monthBtnCssClassCallback: componentConfig.monthBtnCssClassCallback,\n        isMonthDisabledCallback: componentConfig.isMonthDisabledCallback,\n        multipleYearsNavigateBy: componentConfig.multipleYearsNavigateBy,\n        showMultipleYearsNavigation: componentConfig.showMultipleYearsNavigation,\n        showGoToCurrent: componentConfig.showGoToCurrent,\n        numOfMonthRows: componentConfig.numOfMonthRows\n      });\n    }\n\n    getDayBtnText(config, day) {\n      if (config.dayBtnFormatter) {\n        return config.dayBtnFormatter(day);\n      }\n\n      return day.format(config.dayBtnFormat);\n    }\n\n    getDayBtnCssClass(config, day) {\n      if (config.dayBtnCssClassCallback) {\n        return config.dayBtnCssClassCallback(day);\n      }\n\n      return '';\n    }\n\n    removeNearMonthWeeks(currentMonth, monthArray) {\n      if (monthArray[monthArray.length - 1].find(day => day.date.isSame(currentMonth, 'month'))) {\n        return monthArray;\n      } else {\n        return monthArray.slice(0, -1);\n      }\n    }\n\n  }\n\n  DayCalendarService.ɵfac = function DayCalendarService_Factory(t) {\n    return new (t || DayCalendarService)(ɵngcc0.ɵɵinject(UtilsService));\n  };\n\n  DayCalendarService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DayCalendarService,\n    factory: DayCalendarService.ɵfac\n  });\n  return DayCalendarService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$2 = momentNs;\nconst FIRST_PM_HOUR = 12;\nlet TimeSelectService = /*#__PURE__*/(() => {\n  class TimeSelectService {\n    constructor(utilsService) {\n      this.utilsService = utilsService;\n      this.DEFAULT_CONFIG = {\n        hours12Format: 'hh',\n        hours24Format: 'HH',\n        meridiemFormat: 'A',\n        minutesFormat: 'mm',\n        minutesInterval: 1,\n        secondsFormat: 'ss',\n        secondsInterval: 1,\n        showSeconds: false,\n        showTwentyFourHours: false,\n        timeSeparator: ':',\n        locale: moment$2.locale()\n      };\n    }\n\n    getConfig(config) {\n      const timeConfigs = {\n        maxTime: this.utilsService.onlyTime(config && config.maxTime),\n        minTime: this.utilsService.onlyTime(config && config.minTime)\n      };\n\n      const _config = Object.assign(Object.assign(Object.assign({}, this.DEFAULT_CONFIG), this.utilsService.clearUndefined(config)), timeConfigs);\n\n      moment$2.locale(_config.locale);\n      return _config;\n    }\n\n    getTimeFormat(config) {\n      return (config.showTwentyFourHours ? config.hours24Format : config.hours12Format) + config.timeSeparator + config.minutesFormat + (config.showSeconds ? config.timeSeparator + config.secondsFormat : '') + (config.showTwentyFourHours ? '' : ' ' + config.meridiemFormat);\n    }\n\n    getHours(config, t) {\n      const time = t || moment$2();\n      return time && time.format(config.showTwentyFourHours ? config.hours24Format : config.hours12Format);\n    }\n\n    getMinutes(config, t) {\n      const time = t || moment$2();\n      return time && time.format(config.minutesFormat);\n    }\n\n    getSeconds(config, t) {\n      const time = t || moment$2();\n      return time && time.format(config.secondsFormat);\n    }\n\n    getMeridiem(config, time) {\n      return time && time.format(config.meridiemFormat);\n    }\n\n    decrease(config, time, unit) {\n      let amount = 1;\n\n      switch (unit) {\n        case 'minute':\n          amount = config.minutesInterval;\n          break;\n\n        case 'second':\n          amount = config.secondsInterval;\n          break;\n      }\n\n      return time.clone().subtract(amount, unit);\n    }\n\n    increase(config, time, unit) {\n      let amount = 1;\n\n      switch (unit) {\n        case 'minute':\n          amount = config.minutesInterval;\n          break;\n\n        case 'second':\n          amount = config.secondsInterval;\n          break;\n      }\n\n      return time.clone().add(amount, unit);\n    }\n\n    toggleMeridiem(time) {\n      if (time.hours() < FIRST_PM_HOUR) {\n        return time.clone().add(12, 'hour');\n      } else {\n        return time.clone().subtract(12, 'hour');\n      }\n    }\n\n    shouldShowDecrease(config, time, unit) {\n      if (!config.min && !config.minTime) {\n        return true;\n      }\n\n      const newTime = this.decrease(config, time, unit);\n      return (!config.min || config.min.isSameOrBefore(newTime)) && (!config.minTime || config.minTime.isSameOrBefore(this.utilsService.onlyTime(newTime)));\n    }\n\n    shouldShowIncrease(config, time, unit) {\n      if (!config.max && !config.maxTime) {\n        return true;\n      }\n\n      const newTime = this.increase(config, time, unit);\n      return (!config.max || config.max.isSameOrAfter(newTime)) && (!config.maxTime || config.maxTime.isSameOrAfter(this.utilsService.onlyTime(newTime)));\n    }\n\n    shouldShowToggleMeridiem(config, time) {\n      if (!config.min && !config.max && !config.minTime && !config.maxTime) {\n        return true;\n      }\n\n      const newTime = this.toggleMeridiem(time);\n      return (!config.max || config.max.isSameOrAfter(newTime)) && (!config.min || config.min.isSameOrBefore(newTime)) && (!config.maxTime || config.maxTime.isSameOrAfter(this.utilsService.onlyTime(newTime))) && (!config.minTime || config.minTime.isSameOrBefore(this.utilsService.onlyTime(newTime)));\n    }\n\n  }\n\n  TimeSelectService.ɵfac = function TimeSelectService_Factory(t) {\n    return new (t || TimeSelectService)(ɵngcc0.ɵɵinject(UtilsService));\n  };\n\n  TimeSelectService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TimeSelectService,\n    factory: TimeSelectService.ɵfac\n  });\n  return TimeSelectService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$3 = momentNs;\nconst DAY_FORMAT = 'YYYYMMDD';\nconst TIME_FORMAT = 'HH:mm:ss';\nconst COMBINED_FORMAT = DAY_FORMAT + TIME_FORMAT;\nlet DayTimeCalendarService = /*#__PURE__*/(() => {\n  class DayTimeCalendarService {\n    constructor(utilsService, dayCalendarService, timeSelectService) {\n      this.utilsService = utilsService;\n      this.dayCalendarService = dayCalendarService;\n      this.timeSelectService = timeSelectService;\n      this.DEFAULT_CONFIG = {\n        locale: moment$3.locale()\n      };\n    }\n\n    getConfig(config) {\n      const _config = Object.assign(Object.assign(Object.assign({}, this.DEFAULT_CONFIG), this.timeSelectService.getConfig(config)), this.dayCalendarService.getConfig(config));\n\n      moment$3.locale(config.locale);\n      return _config;\n    }\n\n    updateDay(current, day, config) {\n      const time = current ? current : moment$3();\n      let updated = moment$3(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);\n\n      if (config.min) {\n        const min = config.min;\n        updated = min.isAfter(updated) ? min : updated;\n      }\n\n      if (config.max) {\n        const max = config.max;\n        updated = max.isBefore(updated) ? max : updated;\n      }\n\n      return updated;\n    }\n\n    updateTime(current, time) {\n      const day = current ? current : moment$3();\n      return moment$3(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);\n    }\n\n  }\n\n  DayTimeCalendarService.ɵfac = function DayTimeCalendarService_Factory(t) {\n    return new (t || DayTimeCalendarService)(ɵngcc0.ɵɵinject(UtilsService), ɵngcc0.ɵɵinject(DayCalendarService), ɵngcc0.ɵɵinject(TimeSelectService));\n  };\n\n  DayTimeCalendarService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DayTimeCalendarService,\n    factory: DayTimeCalendarService.ɵfac\n  });\n  return DayTimeCalendarService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$4 = momentNs;\nlet DatePickerService = /*#__PURE__*/(() => {\n  class DatePickerService {\n    constructor(utilsService, timeSelectService, daytimeCalendarService) {\n      this.utilsService = utilsService;\n      this.timeSelectService = timeSelectService;\n      this.daytimeCalendarService = daytimeCalendarService;\n      this.onPickerClosed = new EventEmitter();\n      this.defaultConfig = {\n        closeOnSelect: true,\n        closeOnSelectDelay: 100,\n        closeOnEnter: true,\n        format: 'DD-MM-YYYY',\n        openOnFocus: true,\n        openOnClick: true,\n        onOpenDelay: 0,\n        disableKeypress: false,\n        showNearMonthDays: true,\n        showWeekNumbers: false,\n        enableMonthSelector: true,\n        showGoToCurrent: true,\n        locale: moment$4.locale(),\n        hideOnOutsideClick: true\n      };\n    } // todo:: add unit tests\n\n\n    getConfig(config, mode = 'daytime') {\n      const _config = Object.assign(Object.assign(Object.assign({}, this.defaultConfig), {\n        format: this.getDefaultFormatByMode(mode)\n      }), this.utilsService.clearUndefined(config));\n\n      this.utilsService.convertPropsToMoment(_config, _config.format, ['min', 'max']);\n\n      if (config && config.allowMultiSelect && config.closeOnSelect === undefined) {\n        _config.closeOnSelect = false;\n      }\n\n      moment$4.locale(_config.locale);\n      return _config;\n    }\n\n    getDayConfigService(pickerConfig) {\n      return {\n        min: pickerConfig.min,\n        max: pickerConfig.max,\n        isDayDisabledCallback: pickerConfig.isDayDisabledCallback,\n        weekDayFormat: pickerConfig.weekDayFormat,\n        weekDayFormatter: pickerConfig.weekDayFormatter,\n        showNearMonthDays: pickerConfig.showNearMonthDays,\n        showWeekNumbers: pickerConfig.showWeekNumbers,\n        firstDayOfWeek: pickerConfig.firstDayOfWeek,\n        format: pickerConfig.format,\n        allowMultiSelect: pickerConfig.allowMultiSelect,\n        monthFormat: pickerConfig.monthFormat,\n        monthFormatter: pickerConfig.monthFormatter,\n        enableMonthSelector: pickerConfig.enableMonthSelector,\n        yearFormat: pickerConfig.yearFormat,\n        yearFormatter: pickerConfig.yearFormatter,\n        dayBtnFormat: pickerConfig.dayBtnFormat,\n        dayBtnFormatter: pickerConfig.dayBtnFormatter,\n        dayBtnCssClassCallback: pickerConfig.dayBtnCssClassCallback,\n        monthBtnFormat: pickerConfig.monthBtnFormat,\n        monthBtnFormatter: pickerConfig.monthBtnFormatter,\n        monthBtnCssClassCallback: pickerConfig.monthBtnCssClassCallback,\n        isMonthDisabledCallback: pickerConfig.isMonthDisabledCallback,\n        multipleYearsNavigateBy: pickerConfig.multipleYearsNavigateBy,\n        showMultipleYearsNavigation: pickerConfig.showMultipleYearsNavigation,\n        locale: pickerConfig.locale,\n        returnedValueType: pickerConfig.returnedValueType,\n        showGoToCurrent: pickerConfig.showGoToCurrent,\n        unSelectOnClick: pickerConfig.unSelectOnClick,\n        numOfMonthRows: pickerConfig.numOfMonthRows\n      };\n    }\n\n    getDayTimeConfigService(pickerConfig) {\n      return this.daytimeCalendarService.getConfig(pickerConfig);\n    }\n\n    getTimeConfigService(pickerConfig) {\n      return this.timeSelectService.getConfig(pickerConfig);\n    }\n\n    pickerClosed() {\n      this.onPickerClosed.emit();\n    } // todo:: add unit tests\n\n\n    isValidInputDateValue(value, config) {\n      value = value ? value : '';\n      const datesStrArr = this.utilsService.datesStringToStringArray(value);\n      return datesStrArr.every(date => this.utilsService.isDateValid(date, config.format));\n    } // todo:: add unit tests\n\n\n    convertInputValueToMomentArray(value, config) {\n      value = value ? value : '';\n      const datesStrArr = this.utilsService.datesStringToStringArray(value);\n      return this.utilsService.convertToMomentArray(datesStrArr, config);\n    }\n\n    getDefaultFormatByMode(mode) {\n      switch (mode) {\n        case 'day':\n          return 'DD-MM-YYYY';\n\n        case 'daytime':\n          return 'DD-MM-YYYY HH:mm:ss';\n\n        case 'time':\n          return 'HH:mm:ss';\n\n        case 'month':\n          return 'MMM, YYYY';\n      }\n    }\n\n  }\n\n  DatePickerService.ɵfac = function DatePickerService_Factory(t) {\n    return new (t || DatePickerService)(ɵngcc0.ɵɵinject(UtilsService), ɵngcc0.ɵɵinject(TimeSelectService), ɵngcc0.ɵɵinject(DayTimeCalendarService));\n  };\n\n  DatePickerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatePickerService,\n    factory: DatePickerService.ɵfac\n  });\n  return DatePickerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DatePickerComponent = /*#__PURE__*/(() => {\n  class DatePickerComponent {\n    constructor(dayPickerService, domHelper, elemRef, renderer, utilsService, cd) {\n      this.dayPickerService = dayPickerService;\n      this.domHelper = domHelper;\n      this.elemRef = elemRef;\n      this.renderer = renderer;\n      this.utilsService = utilsService;\n      this.cd = cd;\n      this.isInitialized = false;\n      this.mode = 'day';\n      this.placeholder = '';\n      this.disabled = false;\n      this.open = new EventEmitter();\n      this.close = new EventEmitter();\n      this.onChange = new EventEmitter();\n      this.onGoToCurrent = new EventEmitter();\n      this.onLeftNav = new EventEmitter();\n      this.onRightNav = new EventEmitter();\n      this.onSelect = new EventEmitter();\n      this.hideStateHelper = false;\n      this.isFocusedTrigger = false;\n      this.handleInnerElementClickUnlisteners = [];\n      this.globalListenersUnlisteners = [];\n      this.api = {\n        open: this.showCalendars.bind(this),\n        close: this.hideCalendar.bind(this),\n        moveCalendarTo: this.moveCalendarTo.bind(this)\n      };\n      this.selectEvent = SelectEvent;\n      this._areCalendarsShown = false;\n      this._selected = [];\n    }\n\n    get openOnFocus() {\n      return this.componentConfig.openOnFocus;\n    }\n\n    get openOnClick() {\n      return this.componentConfig.openOnClick;\n    }\n\n    get areCalendarsShown() {\n      return this._areCalendarsShown;\n    }\n\n    set areCalendarsShown(value) {\n      if (value) {\n        this.startGlobalListeners();\n        this.domHelper.appendElementToPosition({\n          container: this.appendToElement,\n          element: this.calendarWrapper,\n          anchor: this.inputElementContainer,\n          dimElem: this.popupElem,\n          drops: this.componentConfig.drops,\n          opens: this.componentConfig.opens\n        });\n      } else {\n        this.stopGlobalListeners();\n        this.dayPickerService.pickerClosed();\n      }\n\n      this._areCalendarsShown = value;\n    }\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.inputElementValue = this.utilsService.convertFromMomentArray(this.componentConfig.format, selected, ECalendarValue.StringArr).join(' | ');\n      const val = this.processOnChangeCallback(selected);\n      this.onChangeCallback(val, false);\n      this.onChange.emit(val);\n    }\n\n    get currentDateView() {\n      return this._currentDateView;\n    }\n\n    set currentDateView(date) {\n      this._currentDateView = date;\n\n      if (this.dayCalendarRef) {\n        this.dayCalendarRef.moveCalendarTo(date);\n      }\n\n      if (this.monthCalendarRef) {\n        this.monthCalendarRef.moveCalendarTo(date);\n      }\n\n      if (this.dayTimeCalendarRef) {\n        this.dayTimeCalendarRef.moveCalendarTo(date);\n      }\n    }\n\n    onClick() {\n      if (!this.openOnClick) {\n        return;\n      }\n\n      if (!this.isFocusedTrigger && !this.disabled) {\n        this.hideStateHelper = true;\n\n        if (!this.areCalendarsShown) {\n          this.showCalendars();\n        }\n      }\n    }\n\n    onBodyClick() {\n      if (this.componentConfig.hideOnOutsideClick) {\n        if (!this.hideStateHelper && this.areCalendarsShown) {\n          this.hideCalendar();\n        }\n\n        this.hideStateHelper = false;\n      }\n    }\n\n    onScroll() {\n      if (this.areCalendarsShown) {\n        this.domHelper.setElementPosition({\n          container: this.appendToElement,\n          element: this.calendarWrapper,\n          anchor: this.inputElementContainer,\n          dimElem: this.popupElem,\n          drops: this.componentConfig.drops,\n          opens: this.componentConfig.opens\n        });\n      }\n    }\n\n    writeValue(value) {\n      this.inputValue = value;\n\n      if (value || value === '') {\n        this.selected = this.utilsService.convertToMomentArray(value, this.componentConfig);\n        this.init();\n      } else {\n        this.selected = [];\n      }\n\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    onChangeCallback(_, changedByInput) {}\n\n    registerOnTouched(fn) {\n      this.onTouchedCallback = fn;\n    }\n\n    onTouchedCallback() {}\n\n    validate(formControl) {\n      return this.validateFn(formControl.value);\n    }\n\n    processOnChangeCallback(selected) {\n      if (typeof selected === 'string') {\n        return selected;\n      } else {\n        return this.utilsService.convertFromMomentArray(this.componentConfig.format, selected, this.componentConfig.returnedValueType || this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect));\n      }\n    }\n\n    initValidators() {\n      this.validateFn = this.utilsService.createValidator({\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        minTime: this.minTime,\n        maxTime: this.maxTime\n      }, this.componentConfig.format, this.mode);\n      this.onChangeCallback(this.processOnChangeCallback(this.selected), false);\n    }\n\n    ngOnInit() {\n      this.isInitialized = true;\n      this.init();\n    }\n\n    ngOnChanges(changes) {\n      if (this.isInitialized) {\n        this.init();\n      }\n    }\n\n    ngAfterViewInit() {\n      this.setElementPositionInDom();\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.cd.markForCheck();\n    }\n\n    setElementPositionInDom() {\n      this.calendarWrapper = this.calendarContainer.nativeElement;\n      this.setInputElementContainer();\n      this.popupElem = this.elemRef.nativeElement.querySelector('.dp-popup');\n      this.handleInnerElementClick(this.popupElem);\n      const {\n        appendTo\n      } = this.componentConfig;\n\n      if (appendTo) {\n        if (typeof appendTo === 'string') {\n          this.appendToElement = document.querySelector(appendTo);\n        } else {\n          this.appendToElement = appendTo;\n        }\n      } else {\n        this.appendToElement = this.elemRef.nativeElement;\n      }\n\n      this.appendToElement.appendChild(this.calendarWrapper);\n    }\n\n    setInputElementContainer() {\n      this.inputElementContainer = this.utilsService.getNativeElement(this.componentConfig.inputElementContainer) || this.elemRef.nativeElement.querySelector('.dp-input-container') || document.body;\n    }\n\n    handleInnerElementClick(element) {\n      this.handleInnerElementClickUnlisteners.push(this.renderer.listen(element, 'click', () => {\n        this.hideStateHelper = true;\n      }));\n    }\n\n    init() {\n      this.componentConfig = this.dayPickerService.getConfig(this.config, this.mode);\n      this.currentDateView = this.displayDate ? this.utilsService.convertToMoment(this.displayDate, this.componentConfig.format).clone() : this.utilsService.getDefaultDisplayDate(this.currentDateView, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min);\n      this.dayCalendarConfig = this.dayPickerService.getDayConfigService(this.componentConfig);\n      this.dayTimeCalendarConfig = this.dayPickerService.getDayTimeConfigService(this.componentConfig);\n      this.timeSelectConfig = this.dayPickerService.getTimeConfigService(this.componentConfig);\n      this.initValidators();\n    }\n\n    inputFocused() {\n      if (!this.openOnFocus) {\n        return;\n      }\n\n      clearTimeout(this.onOpenDelayTimeoutHandler);\n      this.isFocusedTrigger = true;\n      this.onOpenDelayTimeoutHandler = setTimeout(() => {\n        if (!this.areCalendarsShown) {\n          this.showCalendars();\n        }\n\n        this.hideStateHelper = false;\n        this.isFocusedTrigger = false;\n        this.cd.markForCheck();\n      }, this.componentConfig.onOpenDelay);\n    }\n\n    inputBlurred() {\n      clearTimeout(this.onOpenDelayTimeoutHandler);\n      this.onTouchedCallback();\n    }\n\n    showCalendars() {\n      this.hideStateHelper = true;\n      this.areCalendarsShown = true;\n\n      if (this.timeSelectRef) {\n        this.timeSelectRef.api.triggerChange();\n      }\n\n      this.open.emit();\n      this.cd.markForCheck();\n    }\n\n    hideCalendar() {\n      this.areCalendarsShown = false;\n\n      if (this.dayCalendarRef) {\n        this.dayCalendarRef.api.toggleCalendarMode(ECalendarMode.Day);\n      }\n\n      this.close.emit();\n      this.cd.markForCheck();\n    }\n\n    onViewDateChange(value) {\n      const strVal = value ? this.utilsService.convertToString(value, this.componentConfig.format) : '';\n\n      if (this.dayPickerService.isValidInputDateValue(strVal, this.componentConfig)) {\n        this.selected = this.dayPickerService.convertInputValueToMomentArray(strVal, this.componentConfig);\n        this.currentDateView = this.selected.length ? this.utilsService.getDefaultDisplayDate(null, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min) : this.currentDateView;\n        this.onSelect.emit({\n          date: strVal,\n          type: SelectEvent.INPUT,\n          granularity: null\n        });\n      } else {\n        this._selected = this.utilsService.getValidMomentArray(strVal, this.componentConfig.format);\n        this.onChangeCallback(this.processOnChangeCallback(strVal), true);\n      }\n    }\n\n    dateSelected(date, granularity, type, ignoreClose) {\n      this.selected = this.utilsService.updateSelected(this.componentConfig.allowMultiSelect, this.selected, date, granularity);\n\n      if (!ignoreClose) {\n        this.onDateClick();\n      }\n\n      this.onSelect.emit({\n        date: date.date,\n        granularity,\n        type\n      });\n    }\n\n    onDateClick() {\n      if (this.componentConfig.closeOnSelect) {\n        setTimeout(this.hideCalendar.bind(this), this.componentConfig.closeOnSelectDelay);\n      }\n    }\n\n    onKeyPress(event) {\n      switch (event.keyCode) {\n        case 9:\n        case 27:\n          this.hideCalendar();\n          break;\n      }\n    }\n\n    moveCalendarTo(date) {\n      const momentDate = this.utilsService.convertToMoment(date, this.componentConfig.format);\n      this.currentDateView = momentDate;\n    }\n\n    onLeftNavClick(change) {\n      this.onLeftNav.emit(change);\n    }\n\n    onRightNavClick(change) {\n      this.onRightNav.emit(change);\n    }\n\n    startGlobalListeners() {\n      this.globalListenersUnlisteners.push(this.renderer.listen(document, 'keydown', e => {\n        this.onKeyPress(e);\n      }), this.renderer.listen(document, 'scroll', () => {\n        this.onScroll();\n      }), this.renderer.listen(document, 'click', () => {\n        this.onBodyClick();\n      }));\n    }\n\n    stopGlobalListeners() {\n      this.globalListenersUnlisteners.forEach(ul => ul());\n      this.globalListenersUnlisteners = [];\n    }\n\n    ngOnDestroy() {\n      this.handleInnerElementClickUnlisteners.forEach(ul => ul());\n\n      if (this.appendToElement) {\n        this.appendToElement.removeChild(this.calendarWrapper);\n      }\n    }\n\n  }\n\n  DatePickerComponent.ɵfac = function DatePickerComponent_Factory(t) {\n    return new (t || DatePickerComponent)(ɵngcc0.ɵɵdirectiveInject(DatePickerService), ɵngcc0.ɵɵdirectiveInject(DomHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(UtilsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  DatePickerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DatePickerComponent,\n    selectors: [[\"dp-date-picker\"]],\n    viewQuery: function DatePickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n        ɵngcc0.ɵɵviewQuery(_c4, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.calendarContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dayCalendarRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthCalendarRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dayTimeCalendarRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.timeSelectRef = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function DatePickerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function DatePickerComponent_click_HostBindingHandler() {\n          return ctx.onClick();\n        })(\"resize\", function DatePickerComponent_resize_HostBindingHandler() {\n          return ctx.onScroll();\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.theme);\n      }\n    },\n    inputs: {\n      mode: \"mode\",\n      placeholder: \"placeholder\",\n      disabled: \"disabled\",\n      config: \"config\",\n      displayDate: \"displayDate\",\n      theme: \"theme\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      minTime: \"minTime\",\n      maxTime: \"maxTime\"\n    },\n    outputs: {\n      open: \"open\",\n      close: \"close\",\n      onChange: \"onChange\",\n      onGoToCurrent: \"onGoToCurrent\",\n      onLeftNav: \"onLeftNav\",\n      onRightNav: \"onRightNav\",\n      onSelect: \"onSelect\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DatePickerService, DayTimeCalendarService, DayCalendarService, TimeSelectService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DatePickerComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DatePickerComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 10,\n    vars: 19,\n    consts: [[3, \"ngClass\"], [1, \"dp-input-container\", 3, \"hidden\"], [\"type\", \"text\", 1, \"dp-picker-input\", 3, \"disabled\", \"ngModel\", \"placeholder\", \"readonly\", \"blur\", \"focus\", \"keydown.enter\", \"ngModelChange\"], [\"container\", \"\"], [3, \"hidden\", \"ngSwitch\"], [3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onGoToCurrent\", \"onLeftNav\", \"onRightNav\", \"onSelect\", 4, \"ngSwitchCase\"], [3, \"config\", \"ngModel\", \"theme\", \"onChange\", 4, \"ngSwitchCase\"], [3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onChange\", \"onGoToCurrent\", \"onLeftNav\", \"onRightNav\", 4, \"ngSwitchCase\"], [3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onGoToCurrent\", \"onLeftNav\", \"onRightNav\", \"onSelect\"], [\"dayCalendar\", \"\"], [\"monthCalendar\", \"\"], [3, \"config\", \"ngModel\", \"theme\", \"onChange\"], [\"timeSelect\", \"\"], [3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onChange\", \"onGoToCurrent\", \"onLeftNav\", \"onRightNav\"], [\"daytimeCalendar\", \"\"]],\n    template: function DatePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"input\", 2);\n        ɵngcc0.ɵɵlistener(\"blur\", function DatePickerComponent_Template_input_blur_2_listener() {\n          return ctx.inputBlurred();\n        })(\"focus\", function DatePickerComponent_Template_input_focus_2_listener() {\n          return ctx.inputFocused();\n        })(\"keydown.enter\", function DatePickerComponent_Template_input_keydown_enter_2_listener() {\n          return ctx.componentConfig.closeOnEnter && ctx.hideCalendar();\n        })(\"ngModelChange\", function DatePickerComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.onViewDateChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(3, \"div\", null, 3)(5, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, DatePickerComponent_dp_day_calendar_6_Template, 2, 4, \"dp-day-calendar\", 5);\n        ɵngcc0.ɵɵtemplate(7, DatePickerComponent_dp_month_calendar_7_Template, 2, 4, \"dp-month-calendar\", 5);\n        ɵngcc0.ɵɵtemplate(8, DatePickerComponent_dp_time_select_8_Template, 2, 3, \"dp-time-select\", 6);\n        ɵngcc0.ɵɵtemplate(9, DatePickerComponent_dp_day_time_calendar_9_Template, 2, 4, \"dp-day-time-calendar\", 7);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(17, _c5, ctx.areCalendarsShown));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", ctx.componentConfig.hideInputContainer);\n        ɵngcc0.ɵɵattribute(\"data-hidden\", ctx.componentConfig.hideInputContainer);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"ngModel\", ctx.inputElementValue)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.componentConfig.disableKeypress);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵclassMapInterpolate1(\"dp-popup \", ctx.theme, \"\");\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx._areCalendarsShown)(\"ngSwitch\", ctx.mode);\n        ɵngcc0.ɵɵattribute(\"data-hidden\", !ctx._areCalendarsShown);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"day\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"month\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"time\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"daytime\");\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgClass, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, DayCalendarComponent, MonthCalendarComponent, TimeSelectComponent, DayTimeCalendarComponent];\n    },\n    styles: [\"dp-date-picker{display:inline-block}dp-date-picker.dp-material .dp-picker-input{box-sizing:border-box;font-size:13px;height:30px;outline:none;width:213px}dp-date-picker .dp-input-container{position:relative}dp-date-picker .dp-selected{background:#106cc8;color:#fff}.dp-popup{background:#fff;border-bottom:1px solid rgba(0,0,0,.1);border-left:1px solid rgba(0,0,0,.1);border-right:1px solid rgba(0,0,0,.1);box-shadow:1px 1px 5px 0 rgba(0,0,0,.1);position:relative;white-space:nowrap;z-index:9999}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return DatePickerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DatePickerDirectiveService = /*#__PURE__*/(() => {\n  class DatePickerDirectiveService {\n    constructor(utilsService) {\n      this.utilsService = utilsService;\n    }\n\n    convertToHTMLElement(attachTo, baseElement) {\n      if (typeof attachTo === 'string') {\n        return this.utilsService.closestParent(baseElement, attachTo);\n      } else if (attachTo) {\n        return attachTo.nativeElement;\n      }\n\n      return undefined;\n    }\n\n    getConfig(config = {}, baseElement, attachTo) {\n      const _config = Object.assign({}, config);\n\n      _config.hideInputContainer = true;\n      let native;\n\n      if (config.inputElementContainer) {\n        native = this.utilsService.getNativeElement(config.inputElementContainer);\n      } else {\n        native = baseElement ? baseElement.nativeElement : null;\n      }\n\n      if (native) {\n        _config.inputElementContainer = attachTo ? this.convertToHTMLElement(attachTo, native) : native;\n      }\n\n      return _config;\n    }\n\n  }\n\n  DatePickerDirectiveService.ɵfac = function DatePickerDirectiveService_Factory(t) {\n    return new (t || DatePickerDirectiveService)(ɵngcc0.ɵɵinject(UtilsService));\n  };\n\n  DatePickerDirectiveService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatePickerDirectiveService,\n    factory: DatePickerDirectiveService.ɵfac\n  });\n  return DatePickerDirectiveService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DatePickerDirective = /*#__PURE__*/(() => {\n  class DatePickerDirective {\n    constructor(viewContainerRef, elemRef, componentFactoryResolver, service, formControl, utilsService) {\n      this.viewContainerRef = viewContainerRef;\n      this.elemRef = elemRef;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.service = service;\n      this.formControl = formControl;\n      this.utilsService = utilsService;\n      this.open = new EventEmitter();\n      this.close = new EventEmitter();\n      this.onChange = new EventEmitter();\n      this.onGoToCurrent = new EventEmitter();\n      this.onLeftNav = new EventEmitter();\n      this.onRightNav = new EventEmitter();\n      this.onSelect = new EventEmitter();\n      this._mode = 'day';\n    }\n\n    get config() {\n      return this._config;\n    }\n\n    set config(config) {\n      this._config = this.service.getConfig(config, this.viewContainerRef.element, this.attachTo);\n      this.updateDatepickerConfig();\n      this.markForCheck();\n    }\n\n    get attachTo() {\n      return this._attachTo;\n    }\n\n    set attachTo(attachTo) {\n      this._attachTo = attachTo;\n      this._config = this.service.getConfig(this.config, this.viewContainerRef.element, this.attachTo);\n      this.updateDatepickerConfig();\n      this.markForCheck();\n    }\n\n    get theme() {\n      return this._theme;\n    }\n\n    set theme(theme) {\n      this._theme = theme;\n\n      if (this.datePicker) {\n        this.datePicker.theme = theme;\n      }\n\n      this.markForCheck();\n    }\n\n    get mode() {\n      return this._mode;\n    }\n\n    set mode(mode) {\n      this._mode = mode;\n\n      if (this.datePicker) {\n        this.datePicker.mode = mode;\n      }\n\n      this.markForCheck();\n    }\n\n    get minDate() {\n      return this._minDate;\n    }\n\n    set minDate(minDate) {\n      this._minDate = minDate;\n\n      if (this.datePicker) {\n        this.datePicker.minDate = minDate;\n        this.datePicker.ngOnInit();\n      }\n\n      this.markForCheck();\n    }\n\n    get maxDate() {\n      return this._maxDate;\n    }\n\n    set maxDate(maxDate) {\n      this._maxDate = maxDate;\n\n      if (this.datePicker) {\n        this.datePicker.maxDate = maxDate;\n        this.datePicker.ngOnInit();\n      }\n\n      this.markForCheck();\n    }\n\n    get minTime() {\n      return this._minTime;\n    }\n\n    set minTime(minTime) {\n      this._minTime = minTime;\n\n      if (this.datePicker) {\n        this.datePicker.minTime = minTime;\n        this.datePicker.ngOnInit();\n      }\n\n      this.markForCheck();\n    }\n\n    get maxTime() {\n      return this._maxTime;\n    }\n\n    set maxTime(maxTime) {\n      this._maxTime = maxTime;\n\n      if (this.datePicker) {\n        this.datePicker.maxTime = maxTime;\n        this.datePicker.ngOnInit();\n      }\n\n      this.markForCheck();\n    }\n\n    get displayDate() {\n      return this._displayDate;\n    }\n\n    set displayDate(displayDate) {\n      this._displayDate = displayDate;\n      this.updateDatepickerConfig();\n      this.markForCheck();\n    }\n\n    ngOnInit() {\n      this.datePicker = this.createDatePicker();\n      this.api = this.datePicker.api;\n      this.updateDatepickerConfig();\n      this.attachModelToDatePicker();\n      this.datePicker.theme = this.theme;\n    }\n\n    createDatePicker() {\n      const factory = this.componentFactoryResolver.resolveComponentFactory(DatePickerComponent);\n      return this.viewContainerRef.createComponent(factory).instance;\n    }\n\n    attachModelToDatePicker() {\n      if (!this.formControl) {\n        return;\n      }\n\n      this.datePicker.onViewDateChange(this.formControl.value);\n      this.formControl.valueChanges.subscribe(value => {\n        if (value !== this.datePicker.inputElementValue) {\n          const strVal = this.utilsService.convertToString(value, this.datePicker.componentConfig.format);\n          this.datePicker.onViewDateChange(strVal);\n        }\n      });\n      let setup = true;\n      this.datePicker.registerOnChange((value, changedByInput) => {\n        if (value) {\n          const isMultiselectEmpty = setup && Array.isArray(value) && !value.length;\n\n          if (!isMultiselectEmpty && !changedByInput) {\n            this.formControl.control.setValue(this.datePicker.inputElementValue);\n          }\n        }\n\n        const errors = this.datePicker.validateFn(value);\n\n        if (!setup) {\n          this.formControl.control.markAsDirty({\n            onlySelf: true\n          });\n        } else {\n          setup = false;\n        }\n\n        if (errors) {\n          if (errors.hasOwnProperty('format')) {\n            const {\n              given\n            } = errors['format'];\n            this.datePicker.inputElementValue = given;\n\n            if (!changedByInput) {\n              this.formControl.control.setValue(given);\n            }\n          }\n\n          this.formControl.control.setErrors(errors);\n        }\n      });\n    }\n\n    onClick() {\n      this.datePicker.onClick();\n    }\n\n    onFocus() {\n      this.datePicker.inputFocused();\n    }\n\n    onEnter() {\n      if (this.datePicker.componentConfig.closeOnEnter) {\n        this.datePicker.hideCalendar();\n      }\n    }\n\n    markForCheck() {\n      if (this.datePicker) {\n        this.datePicker.cd.markForCheck();\n      }\n    }\n\n    updateDatepickerConfig() {\n      if (this.datePicker) {\n        this.datePicker.minDate = this.minDate;\n        this.datePicker.maxDate = this.maxDate;\n        this.datePicker.minTime = this.minTime;\n        this.datePicker.maxTime = this.maxTime;\n        this.datePicker.mode = this.mode || 'day';\n        this.datePicker.displayDate = this.displayDate;\n        this.datePicker.config = this.config;\n        this.datePicker.open = this.open;\n        this.datePicker.close = this.close;\n        this.datePicker.onChange = this.onChange;\n        this.datePicker.onGoToCurrent = this.onGoToCurrent;\n        this.datePicker.onLeftNav = this.onLeftNav;\n        this.datePicker.onRightNav = this.onRightNav;\n        this.datePicker.onSelect = this.onSelect;\n        this.datePicker.init();\n\n        if (this.datePicker.componentConfig.disableKeypress) {\n          this.elemRef.nativeElement.setAttribute('readonly', true);\n        } else {\n          this.elemRef.nativeElement.removeAttribute('readonly');\n        }\n      }\n    }\n\n  }\n\n  DatePickerDirective.ɵfac = function DatePickerDirective_Factory(t) {\n    return new (t || DatePickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(DatePickerDirectiveService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(UtilsService));\n  };\n\n  DatePickerDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatePickerDirective,\n    selectors: [[\"\", \"dpDayPicker\", \"\"]],\n    hostBindings: function DatePickerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function DatePickerDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        })(\"focus\", function DatePickerDirective_focus_HostBindingHandler() {\n          return ctx.onFocus();\n        })(\"keydown.enter\", function DatePickerDirective_keydown_enter_HostBindingHandler() {\n          return ctx.onEnter();\n        });\n      }\n    },\n    inputs: {\n      config: [\"dpDayPicker\", \"config\"],\n      attachTo: \"attachTo\",\n      theme: \"theme\",\n      mode: \"mode\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      minTime: \"minTime\",\n      maxTime: \"maxTime\",\n      displayDate: \"displayDate\"\n    },\n    outputs: {\n      open: \"open\",\n      close: \"close\",\n      onChange: \"onChange\",\n      onGoToCurrent: \"onGoToCurrent\",\n      onLeftNav: \"onLeftNav\",\n      onRightNav: \"onRightNav\",\n      onSelect: \"onSelect\"\n    },\n    exportAs: [\"dpDayPicker\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([DatePickerDirectiveService])]\n  });\n  return DatePickerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$5 = momentNs;\nlet DayCalendarComponent = /*#__PURE__*/(() => {\n  class DayCalendarComponent {\n    constructor(dayCalendarService, utilsService, cd) {\n      this.dayCalendarService = dayCalendarService;\n      this.utilsService = utilsService;\n      this.cd = cd;\n      this.onSelect = new EventEmitter();\n      this.onMonthSelect = new EventEmitter();\n      this.onNavHeaderBtnClick = new EventEmitter();\n      this.onGoToCurrent = new EventEmitter();\n      this.onLeftNav = new EventEmitter();\n      this.onRightNav = new EventEmitter();\n      this.CalendarMode = ECalendarMode;\n      this.isInited = false;\n      this.currentCalendarMode = ECalendarMode.Day;\n      this._shouldShowCurrent = true;\n      this.api = {\n        moveCalendarsBy: this.moveCalendarsBy.bind(this),\n        moveCalendarTo: this.moveCalendarTo.bind(this),\n        toggleCalendarMode: this.toggleCalendarMode.bind(this)\n      };\n    }\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.onChangeCallback(this.processOnChangeCallback(selected));\n    }\n\n    get currentDateView() {\n      return this._currentDateView;\n    }\n\n    set currentDateView(current) {\n      this._currentDateView = current.clone();\n      this.weeks = this.dayCalendarService.generateMonthArray(this.componentConfig, this._currentDateView, this.selected);\n      this.navLabel = this.dayCalendarService.getHeaderLabel(this.componentConfig, this._currentDateView);\n      this.showLeftNav = this.dayCalendarService.shouldShowLeft(this.componentConfig.min, this.currentDateView);\n      this.showRightNav = this.dayCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\n    }\n\n    ngOnInit() {\n      this.isInited = true;\n      this.init();\n      this.initValidators();\n    }\n\n    init() {\n      this.componentConfig = this.dayCalendarService.getConfig(this.config);\n      this.selected = this.selected || [];\n      this.currentDateView = this.displayDate ? this.utilsService.convertToMoment(this.displayDate, this.componentConfig.format).clone() : this.utilsService.getDefaultDisplayDate(this.currentDateView, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min);\n      this.weekdays = this.dayCalendarService.generateWeekdays(this.componentConfig.firstDayOfWeek);\n      this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n      this.monthCalendarConfig = this.dayCalendarService.getMonthCalendarConfig(this.componentConfig);\n      this._shouldShowCurrent = this.shouldShowCurrent();\n    }\n\n    ngOnChanges(changes) {\n      if (this.isInited) {\n        const {\n          minDate,\n          maxDate,\n          config\n        } = changes;\n        this.handleConfigChange(config);\n        this.init();\n\n        if (minDate || maxDate) {\n          this.initValidators();\n        }\n      }\n    }\n\n    writeValue(value) {\n      this.inputValue = value;\n\n      if (value) {\n        this.selected = this.utilsService.convertToMomentArray(value, this.componentConfig);\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n      } else {\n        this.selected = [];\n      }\n\n      this.weeks = this.dayCalendarService.generateMonthArray(this.componentConfig, this.currentDateView, this.selected);\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    onChangeCallback(_) {}\n\n    registerOnTouched(fn) {}\n\n    validate(formControl) {\n      if (this.minDate || this.maxDate) {\n        return this.validateFn(formControl.value);\n      } else {\n        return () => null;\n      }\n    }\n\n    processOnChangeCallback(value) {\n      return this.utilsService.convertFromMomentArray(this.componentConfig.format, value, this.componentConfig.returnedValueType || this.inputValueType);\n    }\n\n    initValidators() {\n      this.validateFn = this.utilsService.createValidator({\n        minDate: this.minDate,\n        maxDate: this.maxDate\n      }, this.componentConfig.format, 'day');\n      this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    }\n\n    dayClicked(day) {\n      if (day.selected && !this.componentConfig.unSelectOnClick) {\n        return;\n      }\n\n      this.selected = this.utilsService.updateSelected(this.componentConfig.allowMultiSelect, this.selected, day);\n      this.weeks = this.dayCalendarService.generateMonthArray(this.componentConfig, this.currentDateView, this.selected);\n      this.onSelect.emit(day);\n    }\n\n    getDayBtnText(day) {\n      return this.dayCalendarService.getDayBtnText(this.componentConfig, day.date);\n    }\n\n    getDayBtnCssClass(day) {\n      const cssClasses = {\n        'dp-selected': day.selected,\n        'dp-current-month': day.currentMonth,\n        'dp-prev-month': day.prevMonth,\n        'dp-next-month': day.nextMonth,\n        'dp-current-day': day.currentDay\n      };\n      const customCssClass = this.dayCalendarService.getDayBtnCssClass(this.componentConfig, day.date);\n\n      if (customCssClass) {\n        cssClasses[customCssClass] = true;\n      }\n\n      return cssClasses;\n    }\n\n    onLeftNavClick() {\n      const from = this.currentDateView.clone();\n      this.moveCalendarsBy(this.currentDateView, -1, 'month');\n      const to = this.currentDateView.clone();\n      this.onLeftNav.emit({\n        from,\n        to\n      });\n    }\n\n    onRightNavClick() {\n      const from = this.currentDateView.clone();\n      this.moveCalendarsBy(this.currentDateView, 1, 'month');\n      const to = this.currentDateView.clone();\n      this.onRightNav.emit({\n        from,\n        to\n      });\n    }\n\n    onMonthCalendarLeftClick(change) {\n      this.onLeftNav.emit(change);\n    }\n\n    onMonthCalendarRightClick(change) {\n      this.onRightNav.emit(change);\n    }\n\n    onMonthCalendarSecondaryLeftClick(change) {\n      this.onRightNav.emit(change);\n    }\n\n    onMonthCalendarSecondaryRightClick(change) {\n      this.onLeftNav.emit(change);\n    }\n\n    getWeekdayName(weekday) {\n      if (this.componentConfig.weekDayFormatter) {\n        return this.componentConfig.weekDayFormatter(weekday.day());\n      }\n\n      return weekday.format(this.componentConfig.weekDayFormat);\n    }\n\n    toggleCalendarMode(mode) {\n      if (this.currentCalendarMode !== mode) {\n        this.currentCalendarMode = mode;\n        this.onNavHeaderBtnClick.emit(mode);\n      }\n\n      this.cd.markForCheck();\n    }\n\n    monthSelected(month) {\n      this.currentDateView = month.date.clone();\n      this.currentCalendarMode = ECalendarMode.Day;\n      this.onMonthSelect.emit(month);\n    }\n\n    moveCalendarsBy(current, amount, granularity = 'month') {\n      this.currentDateView = current.clone().add(amount, granularity);\n      this.cd.markForCheck();\n    }\n\n    moveCalendarTo(to) {\n      if (to) {\n        this.currentDateView = this.utilsService.convertToMoment(to, this.componentConfig.format);\n      }\n\n      this.cd.markForCheck();\n    }\n\n    shouldShowCurrent() {\n      return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent, 'day', this.componentConfig.min, this.componentConfig.max);\n    }\n\n    goToCurrent() {\n      this.currentDateView = moment$5();\n      this.onGoToCurrent.emit();\n    }\n\n    handleConfigChange(config) {\n      if (config) {\n        const prevConf = this.dayCalendarService.getConfig(config.previousValue);\n        const currentConf = this.dayCalendarService.getConfig(config.currentValue);\n\n        if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\n          this._currentDateView = null;\n        }\n\n        if (prevConf.locale !== currentConf.locale) {\n          if (this.currentDateView) {\n            this.currentDateView.locale(currentConf.locale);\n          }\n\n          this.selected.forEach(m => m.locale(currentConf.locale));\n        }\n      }\n    }\n\n  }\n\n  DayCalendarComponent.ɵfac = function DayCalendarComponent_Factory(t) {\n    return new (t || DayCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(DayCalendarService), ɵngcc0.ɵɵdirectiveInject(UtilsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  DayCalendarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DayCalendarComponent,\n    selectors: [[\"dp-day-calendar\"]],\n    hostVars: 2,\n    hostBindings: function DayCalendarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.theme);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      displayDate: \"displayDate\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      theme: \"theme\"\n    },\n    outputs: {\n      onSelect: \"onSelect\",\n      onMonthSelect: \"onMonthSelect\",\n      onNavHeaderBtnClick: \"onNavHeaderBtnClick\",\n      onGoToCurrent: \"onGoToCurrent\",\n      onLeftNav: \"onLeftNav\",\n      onRightNav: \"onRightNav\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DayCalendarService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DayCalendarComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DayCalendarComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"dp-day-calendar-container\", 4, \"ngIf\"], [3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onLeftNav\", \"onLeftSecondaryNav\", \"onNavHeaderBtnClick\", \"onRightNav\", \"onRightSecondaryNav\", \"onSelect\", 4, \"ngIf\"], [1, \"dp-day-calendar-container\"], [3, \"isLabelClickable\", \"label\", \"showGoToCurrent\", \"showLeftNav\", \"showRightNav\", \"theme\", \"onGoToCurrent\", \"onLabelClick\", \"onLeftNav\", \"onRightNav\"], [1, \"dp-calendar-wrapper\", 3, \"ngClass\"], [1, \"dp-weekdays\"], [\"class\", \"dp-calendar-weekday\", 3, \"innerText\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"dp-calendar-week\", 4, \"ngFor\", \"ngForOf\"], [1, \"dp-calendar-weekday\", 3, \"innerText\"], [1, \"dp-calendar-week\"], [\"class\", \"dp-week-number\", 3, \"innerText\", 4, \"ngIf\"], [\"class\", \"dp-calendar-day\", \"type\", \"button\", 3, \"disabled\", \"innerText\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"dp-week-number\", 3, \"innerText\"], [\"type\", \"button\", 1, \"dp-calendar-day\", 3, \"disabled\", \"innerText\", \"ngClass\", \"click\"], [3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onLeftNav\", \"onLeftSecondaryNav\", \"onNavHeaderBtnClick\", \"onRightNav\", \"onRightSecondaryNav\", \"onSelect\"]],\n    template: function DayCalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, DayCalendarComponent_div_0_Template, 6, 11, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DayCalendarComponent_dp_month_calendar_1_Template, 1, 4, \"dp-month-calendar\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.currentCalendarMode === ctx.CalendarMode.Day);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.currentCalendarMode === ctx.CalendarMode.Month);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, CalendarNavComponent, ɵngcc1.NgClass, ɵngcc1.NgForOf, MonthCalendarComponent, ɵngcc2.NgControlStatus, ɵngcc2.NgModel];\n    },\n    styles: [\"dp-day-calendar{display:inline-block}dp-day-calendar .dp-day-calendar-container{background:#fff}dp-day-calendar .dp-calendar-wrapper{border:1px solid #000;box-sizing:border-box}dp-day-calendar .dp-calendar-wrapper .dp-calendar-weekday:first-child{border-left:none}dp-day-calendar .dp-weekdays{font-size:15px;margin-bottom:5px}dp-day-calendar .dp-calendar-weekday{border-bottom:1px solid #000;border-left:1px solid #000;box-sizing:border-box;display:inline-block;text-align:center;width:30px}dp-day-calendar .dp-calendar-day{box-sizing:border-box;cursor:pointer;height:30px;width:30px}dp-day-calendar .dp-selected{background:#106cc8;color:#fff}dp-day-calendar .dp-next-month,dp-day-calendar .dp-prev-month{opacity:.5}dp-day-calendar .dp-hide-near-month .dp-next-month,dp-day-calendar .dp-hide-near-month .dp-prev-month{visibility:hidden}dp-day-calendar .dp-week-number{font-size:9px;position:absolute}dp-day-calendar.dp-material .dp-calendar-weekday{border:none;color:#7a7a7a;height:25px;line-height:25px;width:30px}dp-day-calendar.dp-material .dp-calendar-wrapper{border:1px solid #e0e0e0}dp-day-calendar.dp-material .dp-calendar-day,dp-day-calendar.dp-material .dp-calendar-month{background:#fff;border:none;border-radius:50%;box-sizing:border-box;outline:none}dp-day-calendar.dp-material .dp-calendar-day:hover,dp-day-calendar.dp-material .dp-calendar-month:hover{background:#e0e0e0}dp-day-calendar.dp-material .dp-selected{background:#106cc8;color:#fff}dp-day-calendar.dp-material .dp-selected:hover{background:#106cc8}dp-day-calendar.dp-material .dp-current-day{border:1px solid #106cc8}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return DayCalendarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$6 = momentNs;\nlet MonthCalendarService = /*#__PURE__*/(() => {\n  class MonthCalendarService {\n    constructor(utilsService) {\n      this.utilsService = utilsService;\n      this.DEFAULT_CONFIG = {\n        allowMultiSelect: false,\n        yearFormat: 'YYYY',\n        format: 'MM-YYYY',\n        isNavHeaderBtnClickable: false,\n        monthBtnFormat: 'MMM',\n        locale: moment$6.locale(),\n        multipleYearsNavigateBy: 10,\n        showMultipleYearsNavigation: false,\n        unSelectOnClick: true,\n        numOfMonthRows: 3\n      };\n    }\n\n    getConfig(config) {\n      const _config = Object.assign(Object.assign({}, this.DEFAULT_CONFIG), this.utilsService.clearUndefined(config));\n\n      this.validateConfig(_config);\n      this.utilsService.convertPropsToMoment(_config, _config.format, ['min', 'max']);\n      moment$6.locale(_config.locale);\n      return _config;\n    }\n\n    generateYear(config, year, selected = null) {\n      const index = year.clone().startOf('year');\n      return this.utilsService.createArray(config.numOfMonthRows).map(() => {\n        return this.utilsService.createArray(12 / config.numOfMonthRows).map(() => {\n          const date = index.clone();\n          const month = {\n            date,\n            selected: !!selected.find(s => index.isSame(s, 'month')),\n            currentMonth: index.isSame(moment$6(), 'month'),\n            disabled: this.isMonthDisabled(date, config),\n            text: this.getMonthBtnText(config, date)\n          };\n          index.add(1, 'month');\n          return month;\n        });\n      });\n    }\n\n    isMonthDisabled(date, config) {\n      if (config.isMonthDisabledCallback) {\n        return config.isMonthDisabledCallback(date);\n      }\n\n      if (config.min && date.isBefore(config.min, 'month')) {\n        return true;\n      }\n\n      return !!(config.max && date.isAfter(config.max, 'month'));\n    }\n\n    shouldShowLeft(min, currentMonthView) {\n      return min ? min.isBefore(currentMonthView, 'year') : true;\n    }\n\n    shouldShowRight(max, currentMonthView) {\n      return max ? max.isAfter(currentMonthView, 'year') : true;\n    }\n\n    getHeaderLabel(config, year) {\n      if (config.yearFormatter) {\n        return config.yearFormatter(year);\n      }\n\n      return year.format(config.yearFormat);\n    }\n\n    getMonthBtnText(config, month) {\n      if (config.monthBtnFormatter) {\n        return config.monthBtnFormatter(month);\n      }\n\n      return month.format(config.monthBtnFormat);\n    }\n\n    getMonthBtnCssClass(config, month) {\n      if (config.monthBtnCssClassCallback) {\n        return config.monthBtnCssClassCallback(month);\n      }\n\n      return '';\n    }\n\n    validateConfig(config) {\n      if (config.numOfMonthRows < 1 || config.numOfMonthRows > 12 || !Number.isInteger(12 / config.numOfMonthRows)) {\n        throw new Error('numOfMonthRows has to be between 1 - 12 and divide 12 to integer');\n      }\n    }\n\n  }\n\n  MonthCalendarService.ɵfac = function MonthCalendarService_Factory(t) {\n    return new (t || MonthCalendarService)(ɵngcc0.ɵɵinject(UtilsService));\n  };\n\n  MonthCalendarService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MonthCalendarService,\n    factory: MonthCalendarService.ɵfac\n  });\n  return MonthCalendarService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$7 = momentNs;\nlet MonthCalendarComponent = /*#__PURE__*/(() => {\n  class MonthCalendarComponent {\n    constructor(monthCalendarService, utilsService, cd) {\n      this.monthCalendarService = monthCalendarService;\n      this.utilsService = utilsService;\n      this.cd = cd;\n      this.onSelect = new EventEmitter();\n      this.onNavHeaderBtnClick = new EventEmitter();\n      this.onGoToCurrent = new EventEmitter();\n      this.onLeftNav = new EventEmitter();\n      this.onRightNav = new EventEmitter();\n      this.onLeftSecondaryNav = new EventEmitter();\n      this.onRightSecondaryNav = new EventEmitter();\n      this.isInited = false;\n      this._shouldShowCurrent = true;\n      this.api = {\n        toggleCalendar: this.toggleCalendarMode.bind(this),\n        moveCalendarTo: this.moveCalendarTo.bind(this)\n      };\n    }\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.onChangeCallback(this.processOnChangeCallback(selected));\n    }\n\n    get currentDateView() {\n      return this._currentDateView;\n    }\n\n    set currentDateView(current) {\n      this._currentDateView = current.clone();\n      this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this._currentDateView, this.selected);\n      this.navLabel = this.monthCalendarService.getHeaderLabel(this.componentConfig, this.currentDateView);\n      this.showLeftNav = this.monthCalendarService.shouldShowLeft(this.componentConfig.min, this._currentDateView);\n      this.showRightNav = this.monthCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\n      this.showSecondaryLeftNav = this.componentConfig.showMultipleYearsNavigation && this.showLeftNav;\n      this.showSecondaryRightNav = this.componentConfig.showMultipleYearsNavigation && this.showRightNav;\n    }\n\n    ngOnInit() {\n      this.isInited = true;\n      this.init();\n      this.initValidators();\n    }\n\n    ngOnChanges(changes) {\n      if (this.isInited) {\n        const {\n          minDate,\n          maxDate,\n          config\n        } = changes;\n        this.handleConfigChange(config);\n        this.init();\n\n        if (minDate || maxDate) {\n          this.initValidators();\n        }\n      }\n    }\n\n    init() {\n      this.componentConfig = this.monthCalendarService.getConfig(this.config);\n      this.selected = this.selected || [];\n      this.currentDateView = this.displayDate ? this.displayDate : this.utilsService.getDefaultDisplayDate(this.currentDateView, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min);\n      this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n      this._shouldShowCurrent = this.shouldShowCurrent();\n    }\n\n    writeValue(value) {\n      this.inputValue = value;\n\n      if (value) {\n        this.selected = this.utilsService.convertToMomentArray(value, this.componentConfig);\n        this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this.currentDateView, this.selected);\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n      } else {\n        this.selected = [];\n        this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this.currentDateView, this.selected);\n      }\n\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    onChangeCallback(_) {}\n\n    registerOnTouched(fn) {}\n\n    validate(formControl) {\n      if (this.minDate || this.maxDate) {\n        return this.validateFn(formControl.value);\n      } else {\n        return () => null;\n      }\n    }\n\n    processOnChangeCallback(value) {\n      return this.utilsService.convertFromMomentArray(this.componentConfig.format, value, this.componentConfig.returnedValueType || this.inputValueType);\n    }\n\n    initValidators() {\n      this.validateFn = this.validateFn = this.utilsService.createValidator({\n        minDate: this.minDate,\n        maxDate: this.maxDate\n      }, this.componentConfig.format, 'month');\n      this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    }\n\n    monthClicked(month) {\n      if (month.selected && !this.componentConfig.unSelectOnClick) {\n        return;\n      }\n\n      this.selected = this.utilsService.updateSelected(this.componentConfig.allowMultiSelect, this.selected, month, 'month');\n      this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this.currentDateView, this.selected);\n      this.onSelect.emit(month);\n    }\n\n    onLeftNavClick() {\n      const from = this.currentDateView.clone();\n      this.currentDateView = this.currentDateView.clone().subtract(1, 'year');\n      const to = this.currentDateView.clone();\n      this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this.currentDateView, this.selected);\n      this.onLeftNav.emit({\n        from,\n        to\n      });\n    }\n\n    onLeftSecondaryNavClick() {\n      let navigateBy = this.componentConfig.multipleYearsNavigateBy;\n      const isOutsideRange = this.componentConfig.min && this.currentDateView.year() - this.componentConfig.min.year() < navigateBy;\n\n      if (isOutsideRange) {\n        navigateBy = this.currentDateView.year() - this.componentConfig.min.year();\n      }\n\n      const from = this.currentDateView.clone();\n      this.currentDateView = this.currentDateView.clone().subtract(navigateBy, 'year');\n      const to = this.currentDateView.clone();\n      this.onLeftSecondaryNav.emit({\n        from,\n        to\n      });\n    }\n\n    onRightNavClick() {\n      const from = this.currentDateView.clone();\n      this.currentDateView = this.currentDateView.clone().add(1, 'year');\n      const to = this.currentDateView.clone();\n      this.onRightNav.emit({\n        from,\n        to\n      });\n    }\n\n    onRightSecondaryNavClick() {\n      let navigateBy = this.componentConfig.multipleYearsNavigateBy;\n      const isOutsideRange = this.componentConfig.max && this.componentConfig.max.year() - this.currentDateView.year() < navigateBy;\n\n      if (isOutsideRange) {\n        navigateBy = this.componentConfig.max.year() - this.currentDateView.year();\n      }\n\n      const from = this.currentDateView.clone();\n      this.currentDateView = this.currentDateView.clone().add(navigateBy, 'year');\n      const to = this.currentDateView.clone();\n      this.onRightSecondaryNav.emit({\n        from,\n        to\n      });\n    }\n\n    toggleCalendarMode() {\n      this.onNavHeaderBtnClick.emit();\n    }\n\n    getMonthBtnCssClass(month) {\n      const cssClass = {\n        'dp-selected': month.selected,\n        'dp-current-month': month.currentMonth\n      };\n      const customCssClass = this.monthCalendarService.getMonthBtnCssClass(this.componentConfig, month.date);\n\n      if (customCssClass) {\n        cssClass[customCssClass] = true;\n      }\n\n      return cssClass;\n    }\n\n    shouldShowCurrent() {\n      return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent, 'month', this.componentConfig.min, this.componentConfig.max);\n    }\n\n    goToCurrent() {\n      this.currentDateView = moment$7();\n      this.onGoToCurrent.emit();\n    }\n\n    moveCalendarTo(to) {\n      if (to) {\n        this.currentDateView = this.utilsService.convertToMoment(to, this.componentConfig.format);\n        this.cd.markForCheck();\n      }\n    }\n\n    handleConfigChange(config) {\n      if (config) {\n        const prevConf = this.monthCalendarService.getConfig(config.previousValue);\n        const currentConf = this.monthCalendarService.getConfig(config.currentValue);\n\n        if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\n          this._currentDateView = null;\n        }\n\n        if (prevConf.locale !== currentConf.locale) {\n          if (this.currentDateView) {\n            this.currentDateView.locale(currentConf.locale);\n          }\n\n          (this.selected || []).forEach(m => m.locale(currentConf.locale));\n        }\n      }\n    }\n\n  }\n\n  MonthCalendarComponent.ɵfac = function MonthCalendarComponent_Factory(t) {\n    return new (t || MonthCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(MonthCalendarService), ɵngcc0.ɵɵdirectiveInject(UtilsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MonthCalendarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MonthCalendarComponent,\n    selectors: [[\"dp-month-calendar\"]],\n    hostVars: 2,\n    hostBindings: function MonthCalendarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.theme);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      displayDate: \"displayDate\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      theme: \"theme\"\n    },\n    outputs: {\n      onSelect: \"onSelect\",\n      onNavHeaderBtnClick: \"onNavHeaderBtnClick\",\n      onGoToCurrent: \"onGoToCurrent\",\n      onLeftNav: \"onLeftNav\",\n      onRightNav: \"onRightNav\",\n      onLeftSecondaryNav: \"onLeftSecondaryNav\",\n      onRightSecondaryNav: \"onRightSecondaryNav\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MonthCalendarService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MonthCalendarComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MonthCalendarComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 9,\n    consts: [[1, \"dp-month-calendar-container\"], [3, \"isLabelClickable\", \"label\", \"showGoToCurrent\", \"showLeftNav\", \"showLeftSecondaryNav\", \"showRightNav\", \"showRightSecondaryNav\", \"theme\", \"onGoToCurrent\", \"onLabelClick\", \"onLeftNav\", \"onLeftSecondaryNav\", \"onRightNav\", \"onRightSecondaryNav\"], [1, \"dp-calendar-wrapper\"], [\"class\", \"dp-months-row\", 4, \"ngFor\", \"ngForOf\"], [1, \"dp-months-row\"], [\"class\", \"dp-calendar-month\", \"type\", \"button\", 3, \"disabled\", \"innerText\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"dp-calendar-month\", 3, \"disabled\", \"innerText\", \"ngClass\", \"click\"]],\n    template: function MonthCalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"dp-calendar-nav\", 1);\n        ɵngcc0.ɵɵlistener(\"onGoToCurrent\", function MonthCalendarComponent_Template_dp_calendar_nav_onGoToCurrent_1_listener() {\n          return ctx.goToCurrent();\n        })(\"onLabelClick\", function MonthCalendarComponent_Template_dp_calendar_nav_onLabelClick_1_listener() {\n          return ctx.toggleCalendarMode();\n        })(\"onLeftNav\", function MonthCalendarComponent_Template_dp_calendar_nav_onLeftNav_1_listener() {\n          return ctx.onLeftNavClick();\n        })(\"onLeftSecondaryNav\", function MonthCalendarComponent_Template_dp_calendar_nav_onLeftSecondaryNav_1_listener() {\n          return ctx.onLeftSecondaryNavClick();\n        })(\"onRightNav\", function MonthCalendarComponent_Template_dp_calendar_nav_onRightNav_1_listener() {\n          return ctx.onRightNavClick();\n        })(\"onRightSecondaryNav\", function MonthCalendarComponent_Template_dp_calendar_nav_onRightSecondaryNav_1_listener() {\n          return ctx.onRightSecondaryNavClick();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, MonthCalendarComponent_div_3_Template, 2, 1, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"isLabelClickable\", ctx.componentConfig.isNavHeaderBtnClickable)(\"label\", ctx.navLabel)(\"showGoToCurrent\", ctx.shouldShowCurrent())(\"showLeftNav\", ctx.showLeftNav)(\"showLeftSecondaryNav\", ctx.showSecondaryLeftNav)(\"showRightNav\", ctx.showRightNav)(\"showRightSecondaryNav\", ctx.showSecondaryRightNav)(\"theme\", ctx.theme);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.yearMonths);\n      }\n    },\n    directives: function () {\n      return [CalendarNavComponent, ɵngcc1.NgForOf, ɵngcc1.NgClass];\n    },\n    styles: [\"dp-month-calendar{display:inline-block}dp-month-calendar .dp-month-calendar-container{background:#fff}dp-month-calendar .dp-calendar-wrapper{border:1px solid #000}dp-month-calendar .dp-calendar-month{box-sizing:border-box;cursor:pointer;height:52.5px;width:52.5px}dp-month-calendar .dp-calendar-month.dp-selected{background:#106cc8;color:#fff}dp-month-calendar.dp-material .dp-calendar-weekday{background:#e0e0e0;border:1px solid #e0e0e0;height:25px;line-height:25px;width:30px}dp-month-calendar.dp-material .dp-calendar-wrapper{border:1px solid #e0e0e0}dp-month-calendar.dp-material .dp-calendar-month{background:#fff;border:none;border-radius:50%;box-sizing:border-box;outline:none}dp-month-calendar.dp-material .dp-calendar-month:hover{background:#e0e0e0}dp-month-calendar.dp-material .dp-selected{background:#106cc8;color:#fff}dp-month-calendar.dp-material .dp-selected:hover{background:#106cc8}dp-month-calendar.dp-material .dp-current-month{border:1px solid #106cc8}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MonthCalendarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst moment$8 = momentNs;\nlet TimeSelectComponent = /*#__PURE__*/(() => {\n  class TimeSelectComponent {\n    constructor(timeSelectService, utilsService, cd) {\n      this.timeSelectService = timeSelectService;\n      this.utilsService = utilsService;\n      this.cd = cd;\n      this.onChange = new EventEmitter();\n      this.isInited = false;\n      this.api = {\n        triggerChange: this.emitChange.bind(this)\n      };\n    }\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.calculateTimeParts(this.selected);\n      this.showDecHour = this.timeSelectService.shouldShowDecrease(this.componentConfig, this._selected, 'hour');\n      this.showDecMinute = this.timeSelectService.shouldShowDecrease(this.componentConfig, this._selected, 'minute');\n      this.showDecSecond = this.timeSelectService.shouldShowDecrease(this.componentConfig, this._selected, 'second');\n      this.showIncHour = this.timeSelectService.shouldShowIncrease(this.componentConfig, this._selected, 'hour');\n      this.showIncMinute = this.timeSelectService.shouldShowIncrease(this.componentConfig, this._selected, 'minute');\n      this.showIncSecond = this.timeSelectService.shouldShowIncrease(this.componentConfig, this._selected, 'second');\n      this.showToggleMeridiem = this.timeSelectService.shouldShowToggleMeridiem(this.componentConfig, this._selected);\n      this.onChangeCallback(this.processOnChangeCallback(selected));\n    }\n\n    ngOnInit() {\n      this.isInited = true;\n      this.init();\n      this.initValidators();\n    }\n\n    init() {\n      this.componentConfig = this.timeSelectService.getConfig(this.config);\n      this.selected = this.selected || moment$8();\n      this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n    }\n\n    ngOnChanges(changes) {\n      if (this.isInited) {\n        const {\n          minDate,\n          maxDate,\n          minTime,\n          maxTime\n        } = changes;\n        this.init();\n\n        if (minDate || maxDate || minTime || maxTime) {\n          this.initValidators();\n        }\n\n        this.handleConfigChange(changes.config);\n      }\n    }\n\n    writeValue(value) {\n      this.inputValue = value;\n\n      if (value) {\n        const momentValue = this.utilsService.convertToMomentArray(value, {\n          allowMultiSelect: false,\n          format: this.timeSelectService.getTimeFormat(this.componentConfig)\n        })[0];\n\n        if (momentValue.isValid()) {\n          this.selected = momentValue;\n          this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n        }\n      }\n\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    onChangeCallback(_) {}\n\n    registerOnTouched(fn) {}\n\n    validate(formControl) {\n      if (this.minDate || this.maxDate || this.minTime || this.maxTime) {\n        return this.validateFn(formControl.value);\n      } else {\n        return () => null;\n      }\n    }\n\n    processOnChangeCallback(value) {\n      return this.utilsService.convertFromMomentArray(this.timeSelectService.getTimeFormat(this.componentConfig), [value], this.componentConfig.returnedValueType || this.inputValueType);\n    }\n\n    initValidators() {\n      this.validateFn = this.utilsService.createValidator({\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        minTime: this.minTime,\n        maxTime: this.maxTime\n      }, undefined, 'day');\n      this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    }\n\n    decrease(unit) {\n      this.selected = this.timeSelectService.decrease(this.componentConfig, this.selected, unit);\n      this.emitChange();\n    }\n\n    increase(unit) {\n      this.selected = this.timeSelectService.increase(this.componentConfig, this.selected, unit);\n      this.emitChange();\n    }\n\n    toggleMeridiem() {\n      this.selected = this.timeSelectService.toggleMeridiem(this.selected);\n      this.emitChange();\n    }\n\n    emitChange() {\n      this.onChange.emit({\n        date: this.selected,\n        selected: false\n      });\n      this.cd.markForCheck();\n    }\n\n    calculateTimeParts(time) {\n      this.hours = this.timeSelectService.getHours(this.componentConfig, time);\n      this.minutes = this.timeSelectService.getMinutes(this.componentConfig, time);\n      this.seconds = this.timeSelectService.getSeconds(this.componentConfig, time);\n      this.meridiem = this.timeSelectService.getMeridiem(this.componentConfig, time);\n    }\n\n    handleConfigChange(config) {\n      if (config) {\n        const prevConf = this.timeSelectService.getConfig(config.previousValue);\n        const currentConf = this.timeSelectService.getConfig(config.currentValue);\n\n        if (prevConf.locale !== currentConf.locale) {\n          this.selected = this.selected.clone().locale(currentConf.locale);\n        }\n      }\n    }\n\n  }\n\n  TimeSelectComponent.ɵfac = function TimeSelectComponent_Factory(t) {\n    return new (t || TimeSelectComponent)(ɵngcc0.ɵɵdirectiveInject(TimeSelectService), ɵngcc0.ɵɵdirectiveInject(UtilsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  TimeSelectComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TimeSelectComponent,\n    selectors: [[\"dp-time-select\"]],\n    hostVars: 2,\n    hostBindings: function TimeSelectComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.theme);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      displayDate: \"displayDate\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      minTime: \"minTime\",\n      maxTime: \"maxTime\",\n      theme: \"theme\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TimeSelectService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TimeSelectComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => TimeSelectComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 12,\n    vars: 9,\n    consts: [[1, \"dp-time-select-controls\"], [1, \"dp-time-select-control\", \"dp-time-select-control-hours\"], [\"type\", \"button\", 1, \"dp-time-select-control-up\", 3, \"disabled\", \"click\"], [1, \"dp-time-select-display-hours\", 3, \"innerText\"], [\"type\", \"button\", 1, \"dp-time-select-control-down\", 3, \"disabled\", \"click\"], [1, \"dp-time-select-control\", \"dp-time-select-separator\", 3, \"innerText\"], [1, \"dp-time-select-control\", \"dp-time-select-control-minutes\"], [1, \"dp-time-select-display-minutes\", 3, \"innerText\"], [4, \"ngIf\"], [\"class\", \"dp-time-select-control dp-time-select-control-meridiem\", 4, \"ngIf\"], [1, \"dp-time-select-control\", \"dp-time-select-control-seconds\"], [1, \"dp-time-select-display-seconds\", 3, \"innerText\"], [1, \"dp-time-select-control\", \"dp-time-select-control-meridiem\"], [1, \"dp-time-select-display-meridiem\", 3, \"innerText\"]],\n    template: function TimeSelectComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0)(1, \"li\", 1)(2, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_Template_button_click_2_listener() {\n          return ctx.increase(\"hour\");\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"button\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_Template_button_click_4_listener() {\n          return ctx.decrease(\"hour\");\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelement(5, \"li\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"li\", 6)(7, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_Template_button_click_7_listener() {\n          return ctx.increase(\"minute\");\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(8, \"span\", 7);\n        ɵngcc0.ɵɵelementStart(9, \"button\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function TimeSelectComponent_Template_button_click_9_listener() {\n          return ctx.decrease(\"minute\");\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(10, TimeSelectComponent_ng_container_10_Template, 6, 4, \"ng-container\", 8);\n        ɵngcc0.ɵɵtemplate(11, TimeSelectComponent_li_11_Template, 4, 3, \"li\", 9);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.showIncHour);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerText\", ctx.hours);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.showDecHour);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerText\", ctx.componentConfig.timeSeparator);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.showIncMinute);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerText\", ctx.minutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.showDecMinute);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.componentConfig.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.componentConfig.showTwentyFourHours);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    styles: [\"dp-time-select{display:inline-block}dp-time-select .dp-time-select-controls{background:#fff;line-height:normal;margin:0;padding:0;text-align:center}dp-time-select .dp-time-select-control{display:inline-block;font-size:inherit;letter-spacing:1px;margin:0 auto;vertical-align:middle;width:35px}dp-time-select .dp-time-select-control-down,dp-time-select .dp-time-select-control-up{cursor:pointer;display:block;height:24px;margin:3px auto;position:relative;width:24px}dp-time-select .dp-time-select-control-down:before,dp-time-select .dp-time-select-control-up:before{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";display:inline-block;height:8px;position:relative;transform:rotate(0deg);vertical-align:baseline;width:8px}dp-time-select .dp-time-select-control-up:before{top:4px;transform:rotate(-45deg)}dp-time-select .dp-time-select-control-down:before{transform:rotate(135deg)}dp-time-select .dp-time-select-separator{width:5px}dp-time-select.dp-material .dp-time-select-control-down,dp-time-select.dp-material .dp-time-select-control-up{background:transparent;border:none;border-radius:50%;box-sizing:border-box;outline:none}dp-time-select.dp-material .dp-time-select-control-down:before,dp-time-select.dp-material .dp-time-select-control-up:before{left:0}dp-time-select.dp-material .dp-time-select-control-down:hover,dp-time-select.dp-material .dp-time-select-control-up:hover{background:#e0e0e0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return TimeSelectComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CalendarNavComponent = /*#__PURE__*/(() => {\n  class CalendarNavComponent {\n    constructor() {\n      this.isLabelClickable = false;\n      this.showLeftNav = true;\n      this.showLeftSecondaryNav = false;\n      this.showRightNav = true;\n      this.showRightSecondaryNav = false;\n      this.leftNavDisabled = false;\n      this.leftSecondaryNavDisabled = false;\n      this.rightNavDisabled = false;\n      this.rightSecondaryNavDisabled = false;\n      this.showGoToCurrent = true;\n      this.onLeftNav = new EventEmitter();\n      this.onLeftSecondaryNav = new EventEmitter();\n      this.onRightNav = new EventEmitter();\n      this.onRightSecondaryNav = new EventEmitter();\n      this.onLabelClick = new EventEmitter();\n      this.onGoToCurrent = new EventEmitter();\n    }\n\n    leftNavClicked() {\n      this.onLeftNav.emit();\n    }\n\n    leftSecondaryNavClicked() {\n      this.onLeftSecondaryNav.emit();\n    }\n\n    rightNavClicked() {\n      this.onRightNav.emit();\n    }\n\n    rightSecondaryNavClicked() {\n      this.onRightSecondaryNav.emit();\n    }\n\n    labelClicked() {\n      this.onLabelClick.emit();\n    }\n\n  }\n\n  CalendarNavComponent.ɵfac = function CalendarNavComponent_Factory(t) {\n    return new (t || CalendarNavComponent)();\n  };\n\n  CalendarNavComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CalendarNavComponent,\n    selectors: [[\"dp-calendar-nav\"]],\n    hostVars: 2,\n    hostBindings: function CalendarNavComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.theme);\n      }\n    },\n    inputs: {\n      isLabelClickable: \"isLabelClickable\",\n      showLeftNav: \"showLeftNav\",\n      showLeftSecondaryNav: \"showLeftSecondaryNav\",\n      showRightNav: \"showRightNav\",\n      showRightSecondaryNav: \"showRightSecondaryNav\",\n      leftNavDisabled: \"leftNavDisabled\",\n      leftSecondaryNavDisabled: \"leftSecondaryNavDisabled\",\n      rightNavDisabled: \"rightNavDisabled\",\n      rightSecondaryNavDisabled: \"rightSecondaryNavDisabled\",\n      showGoToCurrent: \"showGoToCurrent\",\n      label: \"label\",\n      theme: \"theme\"\n    },\n    outputs: {\n      onLeftNav: \"onLeftNav\",\n      onLeftSecondaryNav: \"onLeftSecondaryNav\",\n      onRightNav: \"onRightNav\",\n      onRightSecondaryNav: \"onRightSecondaryNav\",\n      onLabelClick: \"onLabelClick\",\n      onGoToCurrent: \"onGoToCurrent\"\n    },\n    decls: 12,\n    vars: 15,\n    consts: [[1, \"dp-calendar-nav-container\"], [1, \"dp-nav-header\"], [3, \"hidden\", \"innerText\"], [\"type\", \"button\", 1, \"dp-nav-header-btn\", 3, \"hidden\", \"innerText\", \"click\"], [1, \"dp-nav-btns-container\"], [1, \"dp-calendar-nav-container-left\"], [\"class\", \"dp-calendar-secondary-nav-left\", \"type\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"dp-calendar-nav-left\", 3, \"disabled\", \"hidden\", \"click\"], [\"class\", \"dp-current-location-btn\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [1, \"dp-calendar-nav-container-right\"], [\"type\", \"button\", 1, \"dp-calendar-nav-right\", 3, \"disabled\", \"hidden\", \"click\"], [\"class\", \"dp-calendar-secondary-nav-right\", \"type\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"dp-calendar-secondary-nav-left\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"dp-current-location-btn\", 3, \"click\"], [\"type\", \"button\", 1, \"dp-calendar-secondary-nav-right\", 3, \"disabled\", \"click\"]],\n    template: function CalendarNavComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        ɵngcc0.ɵɵelement(2, \"span\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"button\", 3);\n        ɵngcc0.ɵɵlistener(\"click\", function CalendarNavComponent_Template_button_click_3_listener() {\n          return ctx.labelClicked();\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(6, CalendarNavComponent_button_6_Template, 1, 1, \"button\", 6);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 7);\n        ɵngcc0.ɵɵlistener(\"click\", function CalendarNavComponent_Template_button_click_7_listener() {\n          return ctx.leftNavClicked();\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(8, CalendarNavComponent_button_8_Template, 1, 0, \"button\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9)(10, \"button\", 10);\n        ɵngcc0.ɵɵlistener(\"click\", function CalendarNavComponent_Template_button_click_10_listener() {\n          return ctx.rightNavClicked();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, CalendarNavComponent_button_11_Template, 1, 1, \"button\", 11);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"hidden\", ctx.isLabelClickable)(\"innerText\", ctx.label);\n        ɵngcc0.ɵɵattribute(\"data-hidden\", ctx.isLabelClickable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.isLabelClickable)(\"innerText\", ctx.label);\n        ɵngcc0.ɵɵattribute(\"data-hidden\", !ctx.isLabelClickable);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLeftSecondaryNav);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.leftNavDisabled)(\"hidden\", !ctx.showLeftNav);\n        ɵngcc0.ɵɵattribute(\"data-hidden\", !ctx.showLeftNav);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showGoToCurrent);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.rightNavDisabled)(\"hidden\", !ctx.showRightNav);\n        ɵngcc0.ɵɵattribute(\"data-hidden\", !ctx.showRightNav);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showRightSecondaryNav);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    styles: [\"dp-calendar-nav .dp-calendar-nav-container{position:relative}dp-calendar-nav .dp-calendar-nav-container,dp-calendar-nav .dp-nav-date-btn{border:1px solid #000;border-bottom:none;box-sizing:border-box;height:25px}dp-calendar-nav .dp-nav-btns-container{display:inline-block;position:absolute;right:5px;top:50%;transform:translateY(-50%)}dp-calendar-nav .dp-calendar-nav-container-left,dp-calendar-nav .dp-calendar-nav-container-right{display:inline-block}dp-calendar-nav .dp-calendar-nav-left,dp-calendar-nav .dp-calendar-nav-right,dp-calendar-nav .dp-calendar-secondary-nav-left,dp-calendar-nav .dp-calendar-secondary-nav-right{cursor:pointer;position:relative;width:16px}dp-calendar-nav .dp-calendar-nav-left,dp-calendar-nav .dp-calendar-nav-right{line-height:0}dp-calendar-nav .dp-calendar-nav-left:before,dp-calendar-nav .dp-calendar-nav-right:before{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";display:inline-block;height:8px;position:relative;transform:rotate(45deg);vertical-align:baseline;width:8px}dp-calendar-nav .dp-calendar-secondary-nav-left,dp-calendar-nav .dp-calendar-secondary-nav-right{padding:0}dp-calendar-nav .dp-calendar-secondary-nav-left:after,dp-calendar-nav .dp-calendar-secondary-nav-left:before,dp-calendar-nav .dp-calendar-secondary-nav-right:after,dp-calendar-nav .dp-calendar-secondary-nav-right:before{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";display:inline-block;height:8px;position:relative;transform:rotate(45deg);vertical-align:baseline;width:8px}dp-calendar-nav .dp-calendar-secondary-nav-left:before,dp-calendar-nav .dp-calendar-secondary-nav-right:before{right:-10px}dp-calendar-nav .dp-calendar-secondary-nav-right{left:auto;right:5px}dp-calendar-nav .dp-calendar-nav-left:before,dp-calendar-nav .dp-calendar-secondary-nav-left:after,dp-calendar-nav .dp-calendar-secondary-nav-left:before{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";display:inline-block;height:8px;position:relative;transform:rotate(-135deg);vertical-align:baseline;width:8px}dp-calendar-nav .dp-calendar-secondary-nav-left:before{right:-10px}dp-calendar-nav .dp-nav-header{display:inline-block;font-size:13px;left:5px;position:absolute;top:50%;transform:translateY(-50%)}dp-calendar-nav .dp-nav-header-btn{cursor:pointer}dp-calendar-nav .dp-current-location-btn{background:rgba(0,0,0,.6);border:1px solid rgba(0,0,0,.6);border-radius:50%;box-shadow:inset 0 0 0 3px #fff;cursor:pointer;height:16px;outline:none;position:relative;top:-1px;vertical-align:middle;width:16px}dp-calendar-nav .dp-current-location-btn:hover{background:#000}dp-calendar-nav.dp-material .dp-calendar-nav-container{border:1px solid #e0e0e0;height:30px}dp-calendar-nav.dp-material .dp-calendar-nav-left,dp-calendar-nav.dp-material .dp-calendar-nav-right,dp-calendar-nav.dp-material .dp-calendar-secondary-nav-left,dp-calendar-nav.dp-material .dp-calendar-secondary-nav-right{background:#fff;border:none;font-size:16px;outline:none;padding:0}dp-calendar-nav.dp-material .dp-calendar-secondary-nav-left,dp-calendar-nav.dp-material .dp-calendar-secondary-nav-right{width:20px}dp-calendar-nav.dp-material .dp-nav-header-btn{background:#fff;border:none;height:20px;outline:none;width:80px}dp-calendar-nav.dp-material .dp-nav-header-btn:hover{background:rgba(0,0,0,.05)}dp-calendar-nav.dp-material .dp-nav-header-btn:active{background:rgba(0,0,0,.1)}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CalendarNavComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DayTimeCalendarComponent = /*#__PURE__*/(() => {\n  class DayTimeCalendarComponent {\n    constructor(dayTimeCalendarService, utilsService, cd) {\n      this.dayTimeCalendarService = dayTimeCalendarService;\n      this.utilsService = utilsService;\n      this.cd = cd;\n      this.onChange = new EventEmitter();\n      this.onGoToCurrent = new EventEmitter();\n      this.onLeftNav = new EventEmitter();\n      this.onRightNav = new EventEmitter();\n      this.isInited = false;\n      this.api = {\n        moveCalendarTo: this.moveCalendarTo.bind(this)\n      };\n    }\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.onChangeCallback(this.processOnChangeCallback(selected));\n    }\n\n    ngOnInit() {\n      this.isInited = true;\n      this.init();\n      this.initValidators();\n    }\n\n    init() {\n      this.componentConfig = this.dayTimeCalendarService.getConfig(this.config);\n      this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n    }\n\n    ngOnChanges(changes) {\n      if (this.isInited) {\n        const {\n          minDate,\n          maxDate\n        } = changes;\n        this.init();\n\n        if (minDate || maxDate) {\n          this.initValidators();\n        }\n      }\n    }\n\n    writeValue(value) {\n      this.inputValue = value;\n\n      if (value) {\n        this.selected = this.utilsService.convertToMomentArray(value, {\n          format: this.componentConfig.format,\n          allowMultiSelect: false\n        })[0];\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n      } else {\n        this.selected = null;\n      }\n\n      this.cd.markForCheck();\n    }\n\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n\n    onChangeCallback(_) {}\n\n    registerOnTouched(fn) {}\n\n    validate(formControl) {\n      if (this.minDate || this.maxDate) {\n        return this.validateFn(formControl.value);\n      } else {\n        return () => null;\n      }\n    }\n\n    processOnChangeCallback(value) {\n      return this.utilsService.convertFromMomentArray(this.componentConfig.format, [value], this.componentConfig.returnedValueType || this.inputValueType);\n    }\n\n    initValidators() {\n      this.validateFn = this.utilsService.createValidator({\n        minDate: this.minDate,\n        maxDate: this.maxDate\n      }, undefined, 'daytime');\n      this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    }\n\n    dateSelected(day) {\n      this.selected = this.dayTimeCalendarService.updateDay(this.selected, day.date, this.config);\n      this.emitChange();\n    }\n\n    timeChange(time) {\n      this.selected = this.dayTimeCalendarService.updateTime(this.selected, time.date);\n      this.emitChange();\n    }\n\n    emitChange() {\n      this.onChange.emit({\n        date: this.selected,\n        selected: false\n      });\n    }\n\n    moveCalendarTo(to) {\n      if (to) {\n        this.dayCalendarRef.moveCalendarTo(to);\n      }\n    }\n\n    onLeftNavClick(change) {\n      this.onLeftNav.emit(change);\n    }\n\n    onRightNavClick(change) {\n      this.onRightNav.emit(change);\n    }\n\n  }\n\n  DayTimeCalendarComponent.ɵfac = function DayTimeCalendarComponent_Factory(t) {\n    return new (t || DayTimeCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(DayTimeCalendarService), ɵngcc0.ɵɵdirectiveInject(UtilsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  DayTimeCalendarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DayTimeCalendarComponent,\n    selectors: [[\"dp-day-time-calendar\"]],\n    viewQuery: function DayTimeCalendarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dayCalendarRef = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function DayTimeCalendarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.theme);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      displayDate: \"displayDate\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      theme: \"theme\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onGoToCurrent: \"onGoToCurrent\",\n      onLeftNav: \"onLeftNav\",\n      onRightNav: \"onRightNav\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DayTimeCalendarService, DayCalendarService, TimeSelectService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DayTimeCalendarComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => DayTimeCalendarComponent),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 7,\n    consts: [[3, \"config\", \"displayDate\", \"ngModel\", \"theme\", \"onGoToCurrent\", \"onLeftNav\", \"onRightNav\", \"onSelect\"], [\"dayCalendar\", \"\"], [3, \"config\", \"ngModel\", \"theme\", \"onChange\"], [\"timeSelect\", \"\"]],\n    template: function DayTimeCalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"dp-day-calendar\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"onGoToCurrent\", function DayTimeCalendarComponent_Template_dp_day_calendar_onGoToCurrent_0_listener() {\n          return ctx.onGoToCurrent.emit();\n        })(\"onLeftNav\", function DayTimeCalendarComponent_Template_dp_day_calendar_onLeftNav_0_listener($event) {\n          return ctx.onLeftNavClick($event);\n        })(\"onRightNav\", function DayTimeCalendarComponent_Template_dp_day_calendar_onRightNav_0_listener($event) {\n          return ctx.onRightNavClick($event);\n        })(\"onSelect\", function DayTimeCalendarComponent_Template_dp_day_calendar_onSelect_0_listener($event) {\n          return ctx.dateSelected($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"dp-time-select\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"onChange\", function DayTimeCalendarComponent_Template_dp_time_select_onChange_2_listener($event) {\n          return ctx.timeChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"config\", ctx.componentConfig)(\"displayDate\", ctx.displayDate)(\"ngModel\", ctx._selected)(\"theme\", ctx.theme);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"config\", ctx.componentConfig)(\"ngModel\", ctx._selected)(\"theme\", ctx.theme);\n      }\n    },\n    directives: [DayCalendarComponent, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, TimeSelectComponent],\n    styles: [\"dp-day-time-calendar{display:inline-block}dp-day-time-calendar dp-time-select{border:1px solid #000;border-top:0;display:block}dp-day-time-calendar.dp-material dp-time-select{border:1px solid #e0e0e0;border-top:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return DayTimeCalendarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DpDatePickerModule = /*#__PURE__*/(() => {\n  class DpDatePickerModule {}\n\n  DpDatePickerModule.ɵfac = function DpDatePickerModule_Factory(t) {\n    return new (t || DpDatePickerModule)();\n  };\n\n  DpDatePickerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DpDatePickerModule\n  });\n  DpDatePickerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return DpDatePickerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DpDatePickerModule, {\n    declarations: function () {\n      return [DatePickerComponent, DatePickerDirective, DayCalendarComponent, MonthCalendarComponent, CalendarNavComponent, TimeSelectComponent, DayTimeCalendarComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [DatePickerComponent, DatePickerDirective, MonthCalendarComponent, DayCalendarComponent, TimeSelectComponent, DayTimeCalendarComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DatePickerComponent, DatePickerDirective, DayCalendarComponent, DayTimeCalendarComponent, DpDatePickerModule, ECalendarMode, ECalendarValue, MonthCalendarComponent, SelectEvent, TimeSelectComponent, DatePickerService as ɵa, UtilsService as ɵb, TimeSelectService as ɵc, DayTimeCalendarService as ɵd, DayCalendarService as ɵe, DomHelper as ɵf, DatePickerDirectiveService as ɵg, MonthCalendarService as ɵh, CalendarNavComponent as ɵi }; //# sourceMappingURL=ng2-date-picker.js.map","map":null,"metadata":{},"sourceType":"module"}